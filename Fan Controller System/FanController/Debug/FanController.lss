
FanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00002a02  00002a76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002310  00000000  00000000  00002ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001338  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  0000657a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000aee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b39a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bd08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0x1a>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x172>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1f8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <__bad_interrupt>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x3e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	fa e2       	ldi	r31, 0x2A	; 42
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 38       	cpi	r26, 0x88	; 136
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>
     170:	0e 94 65 11 	call	0x22ca	; 0x22ca <main>
     174:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <_exit>

00000178 <__bad_interrupt>:
     178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <__fixunssfsi>:
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	7b 01       	movw	r14, r22
     186:	8c 01       	movw	r16, r24
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	5f e4       	ldi	r21, 0x4F	; 79
     190:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gesf2>
     194:	88 23       	and	r24, r24
     196:	8c f0       	brlt	.+34     	; 0x1ba <__fixunssfsi+0x3e>
     198:	c8 01       	movw	r24, r16
     19a:	b7 01       	movw	r22, r14
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 36 02 	call	0x46c	; 0x46c <__subsf3>
     1a8:	0e 94 ca 04 	call	0x994	; 0x994 <__fixsfsi>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	20 50       	subi	r18, 0x00	; 0
     1b2:	30 40       	sbci	r19, 0x00	; 0
     1b4:	40 40       	sbci	r20, 0x00	; 0
     1b6:	50 48       	sbci	r21, 0x80	; 128
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <__fixunssfsi+0x4a>
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 ca 04 	call	0x994	; 0x994 <__fixsfsi>
     1c2:	9b 01       	movw	r18, r22
     1c4:	ac 01       	movw	r20, r24
     1c6:	b9 01       	movw	r22, r18
     1c8:	ca 01       	movw	r24, r20
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <_fpadd_parts>:
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e0 ef       	ldi	r30, 0xF0	; 240
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__>
     1e0:	dc 01       	movw	r26, r24
     1e2:	2b 01       	movw	r4, r22
     1e4:	fa 01       	movw	r30, r20
     1e6:	9c 91       	ld	r25, X
     1e8:	92 30       	cpi	r25, 0x02	; 2
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_fpadd_parts+0x1a>
     1ec:	39 c1       	rjmp	.+626    	; 0x460 <_fpadd_parts+0x28c>
     1ee:	eb 01       	movw	r28, r22
     1f0:	88 81       	ld	r24, Y
     1f2:	82 30       	cpi	r24, 0x02	; 2
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <_fpadd_parts+0x24>
     1f6:	33 c1       	rjmp	.+614    	; 0x45e <_fpadd_parts+0x28a>
     1f8:	94 30       	cpi	r25, 0x04	; 4
     1fa:	69 f4       	brne	.+26     	; 0x216 <_fpadd_parts+0x42>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	09 f0       	breq	.+2      	; 0x202 <_fpadd_parts+0x2e>
     200:	2f c1       	rjmp	.+606    	; 0x460 <_fpadd_parts+0x28c>
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	9c 91       	ld	r25, X
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	98 17       	cp	r25, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <_fpadd_parts+0x3c>
     20e:	28 c1       	rjmp	.+592    	; 0x460 <_fpadd_parts+0x28c>
     210:	a0 e8       	ldi	r26, 0x80	; 128
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	25 c1       	rjmp	.+586    	; 0x460 <_fpadd_parts+0x28c>
     216:	84 30       	cpi	r24, 0x04	; 4
     218:	09 f4       	brne	.+2      	; 0x21c <_fpadd_parts+0x48>
     21a:	21 c1       	rjmp	.+578    	; 0x45e <_fpadd_parts+0x28a>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	a9 f4       	brne	.+42     	; 0x24a <_fpadd_parts+0x76>
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	09 f0       	breq	.+2      	; 0x226 <_fpadd_parts+0x52>
     224:	1d c1       	rjmp	.+570    	; 0x460 <_fpadd_parts+0x28c>
     226:	9a 01       	movw	r18, r20
     228:	ad 01       	movw	r20, r26
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	ea 01       	movw	r28, r20
     22e:	09 90       	ld	r0, Y+
     230:	ae 01       	movw	r20, r28
     232:	e9 01       	movw	r28, r18
     234:	09 92       	st	Y+, r0
     236:	9e 01       	movw	r18, r28
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	c1 f7       	brne	.-16     	; 0x22c <_fpadd_parts+0x58>
     23c:	e2 01       	movw	r28, r4
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	9c 91       	ld	r25, X
     244:	89 23       	and	r24, r25
     246:	81 83       	std	Z+1, r24	; 0x01
     248:	08 c1       	rjmp	.+528    	; 0x45a <_fpadd_parts+0x286>
     24a:	92 30       	cpi	r25, 0x02	; 2
     24c:	09 f4       	brne	.+2      	; 0x250 <_fpadd_parts+0x7c>
     24e:	07 c1       	rjmp	.+526    	; 0x45e <_fpadd_parts+0x28a>
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	2d 90       	ld	r2, X+
     254:	3c 90       	ld	r3, X
     256:	13 97       	sbiw	r26, 0x03	; 3
     258:	eb 01       	movw	r28, r22
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	14 96       	adiw	r26, 0x04	; 4
     260:	ad 90       	ld	r10, X+
     262:	bd 90       	ld	r11, X+
     264:	cd 90       	ld	r12, X+
     266:	dc 90       	ld	r13, X
     268:	17 97       	sbiw	r26, 0x07	; 7
     26a:	ec 80       	ldd	r14, Y+4	; 0x04
     26c:	fd 80       	ldd	r15, Y+5	; 0x05
     26e:	0e 81       	ldd	r16, Y+6	; 0x06
     270:	1f 81       	ldd	r17, Y+7	; 0x07
     272:	91 01       	movw	r18, r2
     274:	28 1b       	sub	r18, r24
     276:	39 0b       	sbc	r19, r25
     278:	b9 01       	movw	r22, r18
     27a:	37 ff       	sbrs	r19, 7
     27c:	04 c0       	rjmp	.+8      	; 0x286 <_fpadd_parts+0xb2>
     27e:	66 27       	eor	r22, r22
     280:	77 27       	eor	r23, r23
     282:	62 1b       	sub	r22, r18
     284:	73 0b       	sbc	r23, r19
     286:	60 32       	cpi	r22, 0x20	; 32
     288:	71 05       	cpc	r23, r1
     28a:	0c f0       	brlt	.+2      	; 0x28e <_fpadd_parts+0xba>
     28c:	61 c0       	rjmp	.+194    	; 0x350 <_fpadd_parts+0x17c>
     28e:	12 16       	cp	r1, r18
     290:	13 06       	cpc	r1, r19
     292:	6c f5       	brge	.+90     	; 0x2ee <_fpadd_parts+0x11a>
     294:	37 01       	movw	r6, r14
     296:	48 01       	movw	r8, r16
     298:	06 2e       	mov	r0, r22
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <_fpadd_parts+0xd0>
     29c:	96 94       	lsr	r9
     29e:	87 94       	ror	r8
     2a0:	77 94       	ror	r7
     2a2:	67 94       	ror	r6
     2a4:	0a 94       	dec	r0
     2a6:	d2 f7       	brpl	.-12     	; 0x29c <_fpadd_parts+0xc8>
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <_fpadd_parts+0xe6>
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	44 1f       	adc	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	6a 95       	dec	r22
     2bc:	d2 f7       	brpl	.-12     	; 0x2b2 <_fpadd_parts+0xde>
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	30 40       	sbci	r19, 0x00	; 0
     2c2:	40 40       	sbci	r20, 0x00	; 0
     2c4:	50 40       	sbci	r21, 0x00	; 0
     2c6:	2e 21       	and	r18, r14
     2c8:	3f 21       	and	r19, r15
     2ca:	40 23       	and	r20, r16
     2cc:	51 23       	and	r21, r17
     2ce:	21 15       	cp	r18, r1
     2d0:	31 05       	cpc	r19, r1
     2d2:	41 05       	cpc	r20, r1
     2d4:	51 05       	cpc	r21, r1
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <_fpadd_parts+0x10c>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	79 01       	movw	r14, r18
     2e2:	8a 01       	movw	r16, r20
     2e4:	e6 28       	or	r14, r6
     2e6:	f7 28       	or	r15, r7
     2e8:	08 29       	or	r16, r8
     2ea:	19 29       	or	r17, r9
     2ec:	3c c0       	rjmp	.+120    	; 0x366 <_fpadd_parts+0x192>
     2ee:	23 2b       	or	r18, r19
     2f0:	d1 f1       	breq	.+116    	; 0x366 <_fpadd_parts+0x192>
     2f2:	26 0e       	add	r2, r22
     2f4:	37 1e       	adc	r3, r23
     2f6:	35 01       	movw	r6, r10
     2f8:	46 01       	movw	r8, r12
     2fa:	06 2e       	mov	r0, r22
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <_fpadd_parts+0x132>
     2fe:	96 94       	lsr	r9
     300:	87 94       	ror	r8
     302:	77 94       	ror	r7
     304:	67 94       	ror	r6
     306:	0a 94       	dec	r0
     308:	d2 f7       	brpl	.-12     	; 0x2fe <_fpadd_parts+0x12a>
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	04 c0       	rjmp	.+8      	; 0x31c <_fpadd_parts+0x148>
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	44 1f       	adc	r20, r20
     31a:	55 1f       	adc	r21, r21
     31c:	6a 95       	dec	r22
     31e:	d2 f7       	brpl	.-12     	; 0x314 <_fpadd_parts+0x140>
     320:	21 50       	subi	r18, 0x01	; 1
     322:	30 40       	sbci	r19, 0x00	; 0
     324:	40 40       	sbci	r20, 0x00	; 0
     326:	50 40       	sbci	r21, 0x00	; 0
     328:	2a 21       	and	r18, r10
     32a:	3b 21       	and	r19, r11
     32c:	4c 21       	and	r20, r12
     32e:	5d 21       	and	r21, r13
     330:	21 15       	cp	r18, r1
     332:	31 05       	cpc	r19, r1
     334:	41 05       	cpc	r20, r1
     336:	51 05       	cpc	r21, r1
     338:	21 f0       	breq	.+8      	; 0x342 <_fpadd_parts+0x16e>
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	59 01       	movw	r10, r18
     344:	6a 01       	movw	r12, r20
     346:	a6 28       	or	r10, r6
     348:	b7 28       	or	r11, r7
     34a:	c8 28       	or	r12, r8
     34c:	d9 28       	or	r13, r9
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_fpadd_parts+0x192>
     350:	82 15       	cp	r24, r2
     352:	93 05       	cpc	r25, r3
     354:	2c f0       	brlt	.+10     	; 0x360 <_fpadd_parts+0x18c>
     356:	1c 01       	movw	r2, r24
     358:	aa 24       	eor	r10, r10
     35a:	bb 24       	eor	r11, r11
     35c:	65 01       	movw	r12, r10
     35e:	03 c0       	rjmp	.+6      	; 0x366 <_fpadd_parts+0x192>
     360:	ee 24       	eor	r14, r14
     362:	ff 24       	eor	r15, r15
     364:	87 01       	movw	r16, r14
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	9c 91       	ld	r25, X
     36a:	d2 01       	movw	r26, r4
     36c:	11 96       	adiw	r26, 0x01	; 1
     36e:	8c 91       	ld	r24, X
     370:	98 17       	cp	r25, r24
     372:	09 f4       	brne	.+2      	; 0x376 <_fpadd_parts+0x1a2>
     374:	45 c0       	rjmp	.+138    	; 0x400 <_fpadd_parts+0x22c>
     376:	99 23       	and	r25, r25
     378:	39 f0       	breq	.+14     	; 0x388 <_fpadd_parts+0x1b4>
     37a:	a8 01       	movw	r20, r16
     37c:	97 01       	movw	r18, r14
     37e:	2a 19       	sub	r18, r10
     380:	3b 09       	sbc	r19, r11
     382:	4c 09       	sbc	r20, r12
     384:	5d 09       	sbc	r21, r13
     386:	06 c0       	rjmp	.+12     	; 0x394 <_fpadd_parts+0x1c0>
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	2e 19       	sub	r18, r14
     38e:	3f 09       	sbc	r19, r15
     390:	40 0b       	sbc	r20, r16
     392:	51 0b       	sbc	r21, r17
     394:	57 fd       	sbrc	r21, 7
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <_fpadd_parts+0x1d4>
     398:	11 82       	std	Z+1, r1	; 0x01
     39a:	33 82       	std	Z+3, r3	; 0x03
     39c:	22 82       	std	Z+2, r2	; 0x02
     39e:	24 83       	std	Z+4, r18	; 0x04
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	46 83       	std	Z+6, r20	; 0x06
     3a4:	57 83       	std	Z+7, r21	; 0x07
     3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <_fpadd_parts+0x20e>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	81 83       	std	Z+1, r24	; 0x01
     3ac:	33 82       	std	Z+3, r3	; 0x03
     3ae:	22 82       	std	Z+2, r2	; 0x02
     3b0:	88 27       	eor	r24, r24
     3b2:	99 27       	eor	r25, r25
     3b4:	dc 01       	movw	r26, r24
     3b6:	82 1b       	sub	r24, r18
     3b8:	93 0b       	sbc	r25, r19
     3ba:	a4 0b       	sbc	r26, r20
     3bc:	b5 0b       	sbc	r27, r21
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	95 83       	std	Z+5, r25	; 0x05
     3c2:	a6 83       	std	Z+6, r26	; 0x06
     3c4:	b7 83       	std	Z+7, r27	; 0x07
     3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <_fpadd_parts+0x20e>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	24 83       	std	Z+4, r18	; 0x04
     3d2:	35 83       	std	Z+5, r19	; 0x05
     3d4:	46 83       	std	Z+6, r20	; 0x06
     3d6:	57 83       	std	Z+7, r21	; 0x07
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	93 83       	std	Z+3, r25	; 0x03
     3e0:	82 83       	std	Z+2, r24	; 0x02
     3e2:	24 81       	ldd	r18, Z+4	; 0x04
     3e4:	35 81       	ldd	r19, Z+5	; 0x05
     3e6:	46 81       	ldd	r20, Z+6	; 0x06
     3e8:	57 81       	ldd	r21, Z+7	; 0x07
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	af 4f       	sbci	r26, 0xFF	; 255
     3fa:	bf 43       	sbci	r27, 0x3F	; 63
     3fc:	28 f3       	brcs	.-54     	; 0x3c8 <_fpadd_parts+0x1f4>
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <_fpadd_parts+0x242>
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	33 82       	std	Z+3, r3	; 0x03
     404:	22 82       	std	Z+2, r2	; 0x02
     406:	ea 0c       	add	r14, r10
     408:	fb 1c       	adc	r15, r11
     40a:	0c 1d       	adc	r16, r12
     40c:	1d 1d       	adc	r17, r13
     40e:	e4 82       	std	Z+4, r14	; 0x04
     410:	f5 82       	std	Z+5, r15	; 0x05
     412:	06 83       	std	Z+6, r16	; 0x06
     414:	17 83       	std	Z+7, r17	; 0x07
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	80 83       	st	Z, r24
     41a:	24 81       	ldd	r18, Z+4	; 0x04
     41c:	35 81       	ldd	r19, Z+5	; 0x05
     41e:	46 81       	ldd	r20, Z+6	; 0x06
     420:	57 81       	ldd	r21, Z+7	; 0x07
     422:	57 ff       	sbrs	r21, 7
     424:	1a c0       	rjmp	.+52     	; 0x45a <_fpadd_parts+0x286>
     426:	c9 01       	movw	r24, r18
     428:	aa 27       	eor	r26, r26
     42a:	97 fd       	sbrc	r25, 7
     42c:	a0 95       	com	r26
     42e:	ba 2f       	mov	r27, r26
     430:	81 70       	andi	r24, 0x01	; 1
     432:	90 70       	andi	r25, 0x00	; 0
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	56 95       	lsr	r21
     43a:	47 95       	ror	r20
     43c:	37 95       	ror	r19
     43e:	27 95       	ror	r18
     440:	82 2b       	or	r24, r18
     442:	93 2b       	or	r25, r19
     444:	a4 2b       	or	r26, r20
     446:	b5 2b       	or	r27, r21
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	95 83       	std	Z+5, r25	; 0x05
     44c:	a6 83       	std	Z+6, r26	; 0x06
     44e:	b7 83       	std	Z+7, r27	; 0x07
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	93 83       	std	Z+3, r25	; 0x03
     458:	82 83       	std	Z+2, r24	; 0x02
     45a:	df 01       	movw	r26, r30
     45c:	01 c0       	rjmp	.+2      	; 0x460 <_fpadd_parts+0x28c>
     45e:	d2 01       	movw	r26, r4
     460:	cd 01       	movw	r24, r26
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	e2 e1       	ldi	r30, 0x12	; 18
     468:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__>

0000046c <__subsf3>:
     46c:	a0 e2       	ldi	r26, 0x20	; 32
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	ec e3       	ldi	r30, 0x3C	; 60
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     478:	69 83       	std	Y+1, r22	; 0x01
     47a:	7a 83       	std	Y+2, r23	; 0x02
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	2d 83       	std	Y+5, r18	; 0x05
     482:	3e 83       	std	Y+6, r19	; 0x06
     484:	4f 83       	std	Y+7, r20	; 0x07
     486:	58 87       	std	Y+8, r21	; 0x08
     488:	e9 e0       	ldi	r30, 0x09	; 9
     48a:	ee 2e       	mov	r14, r30
     48c:	f1 2c       	mov	r15, r1
     48e:	ec 0e       	add	r14, r28
     490:	fd 1e       	adc	r15, r29
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	b7 01       	movw	r22, r14
     498:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     49c:	8e 01       	movw	r16, r28
     49e:	0f 5e       	subi	r16, 0xEF	; 239
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	05 96       	adiw	r24, 0x05	; 5
     4a6:	b8 01       	movw	r22, r16
     4a8:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     4ac:	8a 89       	ldd	r24, Y+18	; 0x12
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	89 27       	eor	r24, r25
     4b2:	8a 8b       	std	Y+18, r24	; 0x12
     4b4:	c7 01       	movw	r24, r14
     4b6:	b8 01       	movw	r22, r16
     4b8:	ae 01       	movw	r20, r28
     4ba:	47 5e       	subi	r20, 0xE7	; 231
     4bc:	5f 4f       	sbci	r21, 0xFF	; 255
     4be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     4c2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__pack_f>
     4c6:	a0 96       	adiw	r28, 0x20	; 32
     4c8:	e6 e0       	ldi	r30, 0x06	; 6
     4ca:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

000004ce <__addsf3>:
     4ce:	a0 e2       	ldi	r26, 0x20	; 32
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	ed e6       	ldi	r30, 0x6D	; 109
     4d4:	f2 e0       	ldi	r31, 0x02	; 2
     4d6:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     4da:	69 83       	std	Y+1, r22	; 0x01
     4dc:	7a 83       	std	Y+2, r23	; 0x02
     4de:	8b 83       	std	Y+3, r24	; 0x03
     4e0:	9c 83       	std	Y+4, r25	; 0x04
     4e2:	2d 83       	std	Y+5, r18	; 0x05
     4e4:	3e 83       	std	Y+6, r19	; 0x06
     4e6:	4f 83       	std	Y+7, r20	; 0x07
     4e8:	58 87       	std	Y+8, r21	; 0x08
     4ea:	f9 e0       	ldi	r31, 0x09	; 9
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	ec 0e       	add	r14, r28
     4f2:	fd 1e       	adc	r15, r29
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	b7 01       	movw	r22, r14
     4fa:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     4fe:	8e 01       	movw	r16, r28
     500:	0f 5e       	subi	r16, 0xEF	; 239
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	ce 01       	movw	r24, r28
     506:	05 96       	adiw	r24, 0x05	; 5
     508:	b8 01       	movw	r22, r16
     50a:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     50e:	c7 01       	movw	r24, r14
     510:	b8 01       	movw	r22, r16
     512:	ae 01       	movw	r20, r28
     514:	47 5e       	subi	r20, 0xE7	; 231
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     51c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__pack_f>
     520:	a0 96       	adiw	r28, 0x20	; 32
     522:	e6 e0       	ldi	r30, 0x06	; 6
     524:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

00000528 <__mulsf3>:
     528:	a0 e2       	ldi	r26, 0x20	; 32
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ea e9       	ldi	r30, 0x9A	; 154
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__>
     534:	69 83       	std	Y+1, r22	; 0x01
     536:	7a 83       	std	Y+2, r23	; 0x02
     538:	8b 83       	std	Y+3, r24	; 0x03
     53a:	9c 83       	std	Y+4, r25	; 0x04
     53c:	2d 83       	std	Y+5, r18	; 0x05
     53e:	3e 83       	std	Y+6, r19	; 0x06
     540:	4f 83       	std	Y+7, r20	; 0x07
     542:	58 87       	std	Y+8, r21	; 0x08
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	be 01       	movw	r22, r28
     54a:	67 5f       	subi	r22, 0xF7	; 247
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     552:	ce 01       	movw	r24, r28
     554:	05 96       	adiw	r24, 0x05	; 5
     556:	be 01       	movw	r22, r28
     558:	6f 5e       	subi	r22, 0xEF	; 239
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     560:	99 85       	ldd	r25, Y+9	; 0x09
     562:	92 30       	cpi	r25, 0x02	; 2
     564:	88 f0       	brcs	.+34     	; 0x588 <__mulsf3+0x60>
     566:	89 89       	ldd	r24, Y+17	; 0x11
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	c8 f0       	brcs	.+50     	; 0x59e <__mulsf3+0x76>
     56c:	94 30       	cpi	r25, 0x04	; 4
     56e:	19 f4       	brne	.+6      	; 0x576 <__mulsf3+0x4e>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	51 f4       	brne	.+20     	; 0x588 <__mulsf3+0x60>
     574:	04 c0       	rjmp	.+8      	; 0x57e <__mulsf3+0x56>
     576:	84 30       	cpi	r24, 0x04	; 4
     578:	29 f4       	brne	.+10     	; 0x584 <__mulsf3+0x5c>
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	81 f4       	brne	.+32     	; 0x59e <__mulsf3+0x76>
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	c6 c0       	rjmp	.+396    	; 0x710 <__mulsf3+0x1e8>
     584:	92 30       	cpi	r25, 0x02	; 2
     586:	49 f4       	brne	.+18     	; 0x59a <__mulsf3+0x72>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	9a 85       	ldd	r25, Y+10	; 0x0a
     58c:	8a 89       	ldd	r24, Y+18	; 0x12
     58e:	98 13       	cpse	r25, r24
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	2a 87       	std	Y+10, r18	; 0x0a
     594:	ce 01       	movw	r24, r28
     596:	09 96       	adiw	r24, 0x09	; 9
     598:	bb c0       	rjmp	.+374    	; 0x710 <__mulsf3+0x1e8>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	49 f4       	brne	.+18     	; 0x5b0 <__mulsf3+0x88>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a2:	8a 89       	ldd	r24, Y+18	; 0x12
     5a4:	98 13       	cpse	r25, r24
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	2a 8b       	std	Y+18, r18	; 0x12
     5aa:	ce 01       	movw	r24, r28
     5ac:	41 96       	adiw	r24, 0x11	; 17
     5ae:	b0 c0       	rjmp	.+352    	; 0x710 <__mulsf3+0x1e8>
     5b0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5b2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5b4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5b6:	58 88       	ldd	r5, Y+16	; 0x10
     5b8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ba:	7e 88       	ldd	r7, Y+22	; 0x16
     5bc:	8f 88       	ldd	r8, Y+23	; 0x17
     5be:	98 8c       	ldd	r9, Y+24	; 0x18
     5c0:	ee 24       	eor	r14, r14
     5c2:	ff 24       	eor	r15, r15
     5c4:	87 01       	movw	r16, r14
     5c6:	aa 24       	eor	r10, r10
     5c8:	bb 24       	eor	r11, r11
     5ca:	65 01       	movw	r12, r10
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	e0 e0       	ldi	r30, 0x00	; 0
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	c1 01       	movw	r24, r2
     5da:	81 70       	andi	r24, 0x01	; 1
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	89 2b       	or	r24, r25
     5e0:	e9 f0       	breq	.+58     	; 0x61c <__mulsf3+0xf4>
     5e2:	e6 0c       	add	r14, r6
     5e4:	f7 1c       	adc	r15, r7
     5e6:	08 1d       	adc	r16, r8
     5e8:	19 1d       	adc	r17, r9
     5ea:	9a 01       	movw	r18, r20
     5ec:	ab 01       	movw	r20, r22
     5ee:	2a 0d       	add	r18, r10
     5f0:	3b 1d       	adc	r19, r11
     5f2:	4c 1d       	adc	r20, r12
     5f4:	5d 1d       	adc	r21, r13
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e6 14       	cp	r14, r6
     600:	f7 04       	cpc	r15, r7
     602:	08 05       	cpc	r16, r8
     604:	19 05       	cpc	r17, r9
     606:	20 f4       	brcc	.+8      	; 0x610 <__mulsf3+0xe8>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a0 e0       	ldi	r26, 0x00	; 0
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ba 01       	movw	r22, r20
     612:	a9 01       	movw	r20, r18
     614:	48 0f       	add	r20, r24
     616:	59 1f       	adc	r21, r25
     618:	6a 1f       	adc	r22, r26
     61a:	7b 1f       	adc	r23, r27
     61c:	aa 0c       	add	r10, r10
     61e:	bb 1c       	adc	r11, r11
     620:	cc 1c       	adc	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	97 fe       	sbrs	r9, 7
     626:	08 c0       	rjmp	.+16     	; 0x638 <__mulsf3+0x110>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	a8 2a       	or	r10, r24
     632:	b9 2a       	or	r11, r25
     634:	ca 2a       	or	r12, r26
     636:	db 2a       	or	r13, r27
     638:	31 96       	adiw	r30, 0x01	; 1
     63a:	e0 32       	cpi	r30, 0x20	; 32
     63c:	f1 05       	cpc	r31, r1
     63e:	49 f0       	breq	.+18     	; 0x652 <__mulsf3+0x12a>
     640:	66 0c       	add	r6, r6
     642:	77 1c       	adc	r7, r7
     644:	88 1c       	adc	r8, r8
     646:	99 1c       	adc	r9, r9
     648:	56 94       	lsr	r5
     64a:	47 94       	ror	r4
     64c:	37 94       	ror	r3
     64e:	27 94       	ror	r2
     650:	c3 cf       	rjmp	.-122    	; 0x5d8 <__mulsf3+0xb0>
     652:	fa 85       	ldd	r31, Y+10	; 0x0a
     654:	ea 89       	ldd	r30, Y+18	; 0x12
     656:	2b 89       	ldd	r18, Y+19	; 0x13
     658:	3c 89       	ldd	r19, Y+20	; 0x14
     65a:	8b 85       	ldd	r24, Y+11	; 0x0b
     65c:	9c 85       	ldd	r25, Y+12	; 0x0c
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	2e 5f       	subi	r18, 0xFE	; 254
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	17 c0       	rjmp	.+46     	; 0x696 <__mulsf3+0x16e>
     668:	ca 01       	movw	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	89 2b       	or	r24, r25
     670:	61 f0       	breq	.+24     	; 0x68a <__mulsf3+0x162>
     672:	16 95       	lsr	r17
     674:	07 95       	ror	r16
     676:	f7 94       	ror	r15
     678:	e7 94       	ror	r14
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	a0 e0       	ldi	r26, 0x00	; 0
     680:	b0 e8       	ldi	r27, 0x80	; 128
     682:	e8 2a       	or	r14, r24
     684:	f9 2a       	or	r15, r25
     686:	0a 2b       	or	r16, r26
     688:	1b 2b       	or	r17, r27
     68a:	76 95       	lsr	r23
     68c:	67 95       	ror	r22
     68e:	57 95       	ror	r21
     690:	47 95       	ror	r20
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	77 fd       	sbrc	r23, 7
     698:	e7 cf       	rjmp	.-50     	; 0x668 <__mulsf3+0x140>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <__mulsf3+0x18c>
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	66 1f       	adc	r22, r22
     6a2:	77 1f       	adc	r23, r23
     6a4:	17 fd       	sbrc	r17, 7
     6a6:	41 60       	ori	r20, 0x01	; 1
     6a8:	ee 0c       	add	r14, r14
     6aa:	ff 1c       	adc	r15, r15
     6ac:	00 1f       	adc	r16, r16
     6ae:	11 1f       	adc	r17, r17
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	30 40       	sbci	r19, 0x00	; 0
     6b4:	40 30       	cpi	r20, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	59 07       	cpc	r21, r25
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	69 07       	cpc	r22, r25
     6be:	90 e4       	ldi	r25, 0x40	; 64
     6c0:	79 07       	cpc	r23, r25
     6c2:	60 f3       	brcs	.-40     	; 0x69c <__mulsf3+0x174>
     6c4:	2b 8f       	std	Y+27, r18	; 0x1b
     6c6:	3c 8f       	std	Y+28, r19	; 0x1c
     6c8:	db 01       	movw	r26, r22
     6ca:	ca 01       	movw	r24, r20
     6cc:	8f 77       	andi	r24, 0x7F	; 127
     6ce:	90 70       	andi	r25, 0x00	; 0
     6d0:	a0 70       	andi	r26, 0x00	; 0
     6d2:	b0 70       	andi	r27, 0x00	; 0
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	91 05       	cpc	r25, r1
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	61 f4       	brne	.+24     	; 0x6f6 <__mulsf3+0x1ce>
     6de:	47 fd       	sbrc	r20, 7
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <__mulsf3+0x1ce>
     6e2:	e1 14       	cp	r14, r1
     6e4:	f1 04       	cpc	r15, r1
     6e6:	01 05       	cpc	r16, r1
     6e8:	11 05       	cpc	r17, r1
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <__mulsf3+0x1ce>
     6ec:	40 5c       	subi	r20, 0xC0	; 192
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	6f 4f       	sbci	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	40 78       	andi	r20, 0x80	; 128
     6f6:	1a 8e       	std	Y+26, r1	; 0x1a
     6f8:	fe 17       	cp	r31, r30
     6fa:	11 f0       	breq	.+4      	; 0x700 <__mulsf3+0x1d8>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8a 8f       	std	Y+26, r24	; 0x1a
     700:	4d 8f       	std	Y+29, r20	; 0x1d
     702:	5e 8f       	std	Y+30, r21	; 0x1e
     704:	6f 8f       	std	Y+31, r22	; 0x1f
     706:	78 a3       	std	Y+32, r23	; 0x20
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	89 8f       	std	Y+25, r24	; 0x19
     70c:	ce 01       	movw	r24, r28
     70e:	49 96       	adiw	r24, 0x19	; 25
     710:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__pack_f>
     714:	a0 96       	adiw	r28, 0x20	; 32
     716:	e2 e1       	ldi	r30, 0x12	; 18
     718:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__>

0000071c <__divsf3>:
     71c:	a8 e1       	ldi	r26, 0x18	; 24
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e4 e9       	ldi	r30, 0x94	; 148
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__prologue_saves__+0x10>
     728:	69 83       	std	Y+1, r22	; 0x01
     72a:	7a 83       	std	Y+2, r23	; 0x02
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	9c 83       	std	Y+4, r25	; 0x04
     730:	2d 83       	std	Y+5, r18	; 0x05
     732:	3e 83       	std	Y+6, r19	; 0x06
     734:	4f 83       	std	Y+7, r20	; 0x07
     736:	58 87       	std	Y+8, r21	; 0x08
     738:	b9 e0       	ldi	r27, 0x09	; 9
     73a:	eb 2e       	mov	r14, r27
     73c:	f1 2c       	mov	r15, r1
     73e:	ec 0e       	add	r14, r28
     740:	fd 1e       	adc	r15, r29
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	b7 01       	movw	r22, r14
     748:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     74c:	8e 01       	movw	r16, r28
     74e:	0f 5e       	subi	r16, 0xEF	; 239
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	ce 01       	movw	r24, r28
     754:	05 96       	adiw	r24, 0x05	; 5
     756:	b8 01       	movw	r22, r16
     758:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     75c:	29 85       	ldd	r18, Y+9	; 0x09
     75e:	22 30       	cpi	r18, 0x02	; 2
     760:	08 f4       	brcc	.+2      	; 0x764 <__divsf3+0x48>
     762:	7e c0       	rjmp	.+252    	; 0x860 <__stack+0x1>
     764:	39 89       	ldd	r19, Y+17	; 0x11
     766:	32 30       	cpi	r19, 0x02	; 2
     768:	10 f4       	brcc	.+4      	; 0x76e <__divsf3+0x52>
     76a:	b8 01       	movw	r22, r16
     76c:	7c c0       	rjmp	.+248    	; 0x866 <__stack+0x7>
     76e:	8a 85       	ldd	r24, Y+10	; 0x0a
     770:	9a 89       	ldd	r25, Y+18	; 0x12
     772:	89 27       	eor	r24, r25
     774:	8a 87       	std	Y+10, r24	; 0x0a
     776:	24 30       	cpi	r18, 0x04	; 4
     778:	11 f0       	breq	.+4      	; 0x77e <__divsf3+0x62>
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	31 f4       	brne	.+12     	; 0x78a <__divsf3+0x6e>
     77e:	23 17       	cp	r18, r19
     780:	09 f0       	breq	.+2      	; 0x784 <__divsf3+0x68>
     782:	6e c0       	rjmp	.+220    	; 0x860 <__stack+0x1>
     784:	60 e8       	ldi	r22, 0x80	; 128
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	6e c0       	rjmp	.+220    	; 0x866 <__stack+0x7>
     78a:	34 30       	cpi	r19, 0x04	; 4
     78c:	39 f4       	brne	.+14     	; 0x79c <__divsf3+0x80>
     78e:	1d 86       	std	Y+13, r1	; 0x0d
     790:	1e 86       	std	Y+14, r1	; 0x0e
     792:	1f 86       	std	Y+15, r1	; 0x0f
     794:	18 8a       	std	Y+16, r1	; 0x10
     796:	1c 86       	std	Y+12, r1	; 0x0c
     798:	1b 86       	std	Y+11, r1	; 0x0b
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__divsf3+0x88>
     79c:	32 30       	cpi	r19, 0x02	; 2
     79e:	21 f4       	brne	.+8      	; 0x7a8 <__divsf3+0x8c>
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	89 87       	std	Y+9, r24	; 0x09
     7a4:	b7 01       	movw	r22, r14
     7a6:	5f c0       	rjmp	.+190    	; 0x866 <__stack+0x7>
     7a8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7aa:	3c 85       	ldd	r19, Y+12	; 0x0c
     7ac:	8b 89       	ldd	r24, Y+19	; 0x13
     7ae:	9c 89       	ldd	r25, Y+20	; 0x14
     7b0:	28 1b       	sub	r18, r24
     7b2:	39 0b       	sbc	r19, r25
     7b4:	3c 87       	std	Y+12, r19	; 0x0c
     7b6:	2b 87       	std	Y+11, r18	; 0x0b
     7b8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ba:	fe 84       	ldd	r15, Y+14	; 0x0e
     7bc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7be:	18 89       	ldd	r17, Y+16	; 0x10
     7c0:	ad 88       	ldd	r10, Y+21	; 0x15
     7c2:	be 88       	ldd	r11, Y+22	; 0x16
     7c4:	cf 88       	ldd	r12, Y+23	; 0x17
     7c6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7c8:	ea 14       	cp	r14, r10
     7ca:	fb 04       	cpc	r15, r11
     7cc:	0c 05       	cpc	r16, r12
     7ce:	1d 05       	cpc	r17, r13
     7d0:	40 f4       	brcc	.+16     	; 0x7e2 <__divsf3+0xc6>
     7d2:	ee 0c       	add	r14, r14
     7d4:	ff 1c       	adc	r15, r15
     7d6:	00 1f       	adc	r16, r16
     7d8:	11 1f       	adc	r17, r17
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	30 40       	sbci	r19, 0x00	; 0
     7de:	3c 87       	std	Y+12, r19	; 0x0c
     7e0:	2b 87       	std	Y+11, r18	; 0x0b
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e4       	ldi	r27, 0x40	; 64
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	ea 14       	cp	r14, r10
     7f8:	fb 04       	cpc	r15, r11
     7fa:	0c 05       	cpc	r16, r12
     7fc:	1d 05       	cpc	r17, r13
     7fe:	40 f0       	brcs	.+16     	; 0x810 <__divsf3+0xf4>
     800:	28 2b       	or	r18, r24
     802:	39 2b       	or	r19, r25
     804:	4a 2b       	or	r20, r26
     806:	5b 2b       	or	r21, r27
     808:	ea 18       	sub	r14, r10
     80a:	fb 08       	sbc	r15, r11
     80c:	0c 09       	sbc	r16, r12
     80e:	1d 09       	sbc	r17, r13
     810:	b6 95       	lsr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	ee 0c       	add	r14, r14
     81a:	ff 1c       	adc	r15, r15
     81c:	00 1f       	adc	r16, r16
     81e:	11 1f       	adc	r17, r17
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	6f 31       	cpi	r22, 0x1F	; 31
     826:	71 05       	cpc	r23, r1
     828:	31 f7       	brne	.-52     	; 0x7f6 <__divsf3+0xda>
     82a:	da 01       	movw	r26, r20
     82c:	c9 01       	movw	r24, r18
     82e:	8f 77       	andi	r24, 0x7F	; 127
     830:	90 70       	andi	r25, 0x00	; 0
     832:	a0 70       	andi	r26, 0x00	; 0
     834:	b0 70       	andi	r27, 0x00	; 0
     836:	80 34       	cpi	r24, 0x40	; 64
     838:	91 05       	cpc	r25, r1
     83a:	a1 05       	cpc	r26, r1
     83c:	b1 05       	cpc	r27, r1
     83e:	61 f4       	brne	.+24     	; 0x858 <__divsf3+0x13c>
     840:	27 fd       	sbrc	r18, 7
     842:	0a c0       	rjmp	.+20     	; 0x858 <__divsf3+0x13c>
     844:	e1 14       	cp	r14, r1
     846:	f1 04       	cpc	r15, r1
     848:	01 05       	cpc	r16, r1
     84a:	11 05       	cpc	r17, r1
     84c:	29 f0       	breq	.+10     	; 0x858 <__divsf3+0x13c>
     84e:	20 5c       	subi	r18, 0xC0	; 192
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	4f 4f       	sbci	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	20 78       	andi	r18, 0x80	; 128
     858:	2d 87       	std	Y+13, r18	; 0x0d
     85a:	3e 87       	std	Y+14, r19	; 0x0e
     85c:	4f 87       	std	Y+15, r20	; 0x0f
     85e:	58 8b       	std	Y+16, r21	; 0x10
     860:	be 01       	movw	r22, r28
     862:	67 5f       	subi	r22, 0xF7	; 247
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	cb 01       	movw	r24, r22
     868:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__pack_f>
     86c:	68 96       	adiw	r28, 0x18	; 24
     86e:	ea e0       	ldi	r30, 0x0A	; 10
     870:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__epilogue_restores__+0x10>

00000874 <__gtsf2>:
     874:	a8 e1       	ldi	r26, 0x18	; 24
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e0 e4       	ldi	r30, 0x40	; 64
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     880:	69 83       	std	Y+1, r22	; 0x01
     882:	7a 83       	std	Y+2, r23	; 0x02
     884:	8b 83       	std	Y+3, r24	; 0x03
     886:	9c 83       	std	Y+4, r25	; 0x04
     888:	2d 83       	std	Y+5, r18	; 0x05
     88a:	3e 83       	std	Y+6, r19	; 0x06
     88c:	4f 83       	std	Y+7, r20	; 0x07
     88e:	58 87       	std	Y+8, r21	; 0x08
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	e8 2e       	mov	r14, r24
     894:	f1 2c       	mov	r15, r1
     896:	ec 0e       	add	r14, r28
     898:	fd 1e       	adc	r15, r29
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	b7 01       	movw	r22, r14
     8a0:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     8a4:	8e 01       	movw	r16, r28
     8a6:	0f 5e       	subi	r16, 0xEF	; 239
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
     8ac:	05 96       	adiw	r24, 0x05	; 5
     8ae:	b8 01       	movw	r22, r16
     8b0:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     8b4:	89 85       	ldd	r24, Y+9	; 0x09
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	40 f0       	brcs	.+16     	; 0x8ca <__gtsf2+0x56>
     8ba:	89 89       	ldd	r24, Y+17	; 0x11
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	28 f0       	brcs	.+10     	; 0x8ca <__gtsf2+0x56>
     8c0:	c7 01       	movw	r24, r14
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 33 07 	call	0xe66	; 0xe66 <__fpcmp_parts_f>
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <__gtsf2+0x58>
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	68 96       	adiw	r28, 0x18	; 24
     8ce:	e6 e0       	ldi	r30, 0x06	; 6
     8d0:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

000008d4 <__gesf2>:
     8d4:	a8 e1       	ldi	r26, 0x18	; 24
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e0 e7       	ldi	r30, 0x70	; 112
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     8e0:	69 83       	std	Y+1, r22	; 0x01
     8e2:	7a 83       	std	Y+2, r23	; 0x02
     8e4:	8b 83       	std	Y+3, r24	; 0x03
     8e6:	9c 83       	std	Y+4, r25	; 0x04
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	3e 83       	std	Y+6, r19	; 0x06
     8ec:	4f 83       	std	Y+7, r20	; 0x07
     8ee:	58 87       	std	Y+8, r21	; 0x08
     8f0:	89 e0       	ldi	r24, 0x09	; 9
     8f2:	e8 2e       	mov	r14, r24
     8f4:	f1 2c       	mov	r15, r1
     8f6:	ec 0e       	add	r14, r28
     8f8:	fd 1e       	adc	r15, r29
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     904:	8e 01       	movw	r16, r28
     906:	0f 5e       	subi	r16, 0xEF	; 239
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	05 96       	adiw	r24, 0x05	; 5
     90e:	b8 01       	movw	r22, r16
     910:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     914:	89 85       	ldd	r24, Y+9	; 0x09
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	40 f0       	brcs	.+16     	; 0x92a <__gesf2+0x56>
     91a:	89 89       	ldd	r24, Y+17	; 0x11
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	28 f0       	brcs	.+10     	; 0x92a <__gesf2+0x56>
     920:	c7 01       	movw	r24, r14
     922:	b8 01       	movw	r22, r16
     924:	0e 94 33 07 	call	0xe66	; 0xe66 <__fpcmp_parts_f>
     928:	01 c0       	rjmp	.+2      	; 0x92c <__gesf2+0x58>
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	68 96       	adiw	r28, 0x18	; 24
     92e:	e6 e0       	ldi	r30, 0x06	; 6
     930:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

00000934 <__ltsf2>:
     934:	a8 e1       	ldi	r26, 0x18	; 24
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     940:	69 83       	std	Y+1, r22	; 0x01
     942:	7a 83       	std	Y+2, r23	; 0x02
     944:	8b 83       	std	Y+3, r24	; 0x03
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	2d 83       	std	Y+5, r18	; 0x05
     94a:	3e 83       	std	Y+6, r19	; 0x06
     94c:	4f 83       	std	Y+7, r20	; 0x07
     94e:	58 87       	std	Y+8, r21	; 0x08
     950:	89 e0       	ldi	r24, 0x09	; 9
     952:	e8 2e       	mov	r14, r24
     954:	f1 2c       	mov	r15, r1
     956:	ec 0e       	add	r14, r28
     958:	fd 1e       	adc	r15, r29
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	b7 01       	movw	r22, r14
     960:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     964:	8e 01       	movw	r16, r28
     966:	0f 5e       	subi	r16, 0xEF	; 239
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	ce 01       	movw	r24, r28
     96c:	05 96       	adiw	r24, 0x05	; 5
     96e:	b8 01       	movw	r22, r16
     970:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	40 f0       	brcs	.+16     	; 0x98a <__ltsf2+0x56>
     97a:	89 89       	ldd	r24, Y+17	; 0x11
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	28 f0       	brcs	.+10     	; 0x98a <__ltsf2+0x56>
     980:	c7 01       	movw	r24, r14
     982:	b8 01       	movw	r22, r16
     984:	0e 94 33 07 	call	0xe66	; 0xe66 <__fpcmp_parts_f>
     988:	01 c0       	rjmp	.+2      	; 0x98c <__ltsf2+0x58>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	68 96       	adiw	r28, 0x18	; 24
     98e:	e6 e0       	ldi	r30, 0x06	; 6
     990:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

00000994 <__fixsfsi>:
     994:	ac e0       	ldi	r26, 0x0C	; 12
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e0 ed       	ldi	r30, 0xD0	; 208
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__prologue_saves__+0x20>
     9a0:	69 83       	std	Y+1, r22	; 0x01
     9a2:	7a 83       	std	Y+2, r23	; 0x02
     9a4:	8b 83       	std	Y+3, r24	; 0x03
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	be 01       	movw	r22, r28
     9ae:	6b 5f       	subi	r22, 0xFB	; 251
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	0e 94 bb 06 	call	0xd76	; 0xd76 <__unpack_f>
     9b6:	8d 81       	ldd	r24, Y+5	; 0x05
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	61 f1       	breq	.+88     	; 0xa14 <__fixsfsi+0x80>
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	50 f1       	brcs	.+84     	; 0xa14 <__fixsfsi+0x80>
     9c0:	84 30       	cpi	r24, 0x04	; 4
     9c2:	21 f4       	brne	.+8      	; 0x9cc <__fixsfsi+0x38>
     9c4:	8e 81       	ldd	r24, Y+6	; 0x06
     9c6:	88 23       	and	r24, r24
     9c8:	51 f1       	breq	.+84     	; 0xa1e <__fixsfsi+0x8a>
     9ca:	2e c0       	rjmp	.+92     	; 0xa28 <__fixsfsi+0x94>
     9cc:	2f 81       	ldd	r18, Y+7	; 0x07
     9ce:	38 85       	ldd	r19, Y+8	; 0x08
     9d0:	37 fd       	sbrc	r19, 7
     9d2:	20 c0       	rjmp	.+64     	; 0xa14 <__fixsfsi+0x80>
     9d4:	6e 81       	ldd	r22, Y+6	; 0x06
     9d6:	2f 31       	cpi	r18, 0x1F	; 31
     9d8:	31 05       	cpc	r19, r1
     9da:	1c f0       	brlt	.+6      	; 0x9e2 <__fixsfsi+0x4e>
     9dc:	66 23       	and	r22, r22
     9de:	f9 f0       	breq	.+62     	; 0xa1e <__fixsfsi+0x8a>
     9e0:	23 c0       	rjmp	.+70     	; 0xa28 <__fixsfsi+0x94>
     9e2:	8e e1       	ldi	r24, 0x1E	; 30
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	82 1b       	sub	r24, r18
     9e8:	93 0b       	sbc	r25, r19
     9ea:	29 85       	ldd	r18, Y+9	; 0x09
     9ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ee:	4b 85       	ldd	r20, Y+11	; 0x0b
     9f0:	5c 85       	ldd	r21, Y+12	; 0x0c
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__fixsfsi+0x68>
     9f4:	56 95       	lsr	r21
     9f6:	47 95       	ror	r20
     9f8:	37 95       	ror	r19
     9fa:	27 95       	ror	r18
     9fc:	8a 95       	dec	r24
     9fe:	d2 f7       	brpl	.-12     	; 0x9f4 <__fixsfsi+0x60>
     a00:	66 23       	and	r22, r22
     a02:	b1 f0       	breq	.+44     	; 0xa30 <__fixsfsi+0x9c>
     a04:	50 95       	com	r21
     a06:	40 95       	com	r20
     a08:	30 95       	com	r19
     a0a:	21 95       	neg	r18
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	4f 4f       	sbci	r20, 0xFF	; 255
     a10:	5f 4f       	sbci	r21, 0xFF	; 255
     a12:	0e c0       	rjmp	.+28     	; 0xa30 <__fixsfsi+0x9c>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	09 c0       	rjmp	.+18     	; 0xa30 <__fixsfsi+0x9c>
     a1e:	2f ef       	ldi	r18, 0xFF	; 255
     a20:	3f ef       	ldi	r19, 0xFF	; 255
     a22:	4f ef       	ldi	r20, 0xFF	; 255
     a24:	5f e7       	ldi	r21, 0x7F	; 127
     a26:	04 c0       	rjmp	.+8      	; 0xa30 <__fixsfsi+0x9c>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e8       	ldi	r21, 0x80	; 128
     a30:	b9 01       	movw	r22, r18
     a32:	ca 01       	movw	r24, r20
     a34:	2c 96       	adiw	r28, 0x0c	; 12
     a36:	e2 e0       	ldi	r30, 0x02	; 2
     a38:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__epilogue_restores__+0x20>

00000a3c <__floatunsisf>:
     a3c:	a8 e0       	ldi	r26, 0x08	; 8
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e4 e2       	ldi	r30, 0x24	; 36
     a42:	f5 e0       	ldi	r31, 0x05	; 5
     a44:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__prologue_saves__+0x10>
     a48:	7b 01       	movw	r14, r22
     a4a:	8c 01       	movw	r16, r24
     a4c:	61 15       	cp	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	81 05       	cpc	r24, r1
     a52:	91 05       	cpc	r25, r1
     a54:	19 f4       	brne	.+6      	; 0xa5c <__floatunsisf+0x20>
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	89 83       	std	Y+1, r24	; 0x01
     a5a:	60 c0       	rjmp	.+192    	; 0xb1c <__floatunsisf+0xe0>
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	89 83       	std	Y+1, r24	; 0x01
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	c8 2e       	mov	r12, r24
     a64:	d1 2c       	mov	r13, r1
     a66:	dc 82       	std	Y+4, r13	; 0x04
     a68:	cb 82       	std	Y+3, r12	; 0x03
     a6a:	ed 82       	std	Y+5, r14	; 0x05
     a6c:	fe 82       	std	Y+6, r15	; 0x06
     a6e:	0f 83       	std	Y+7, r16	; 0x07
     a70:	18 87       	std	Y+8, r17	; 0x08
     a72:	c8 01       	movw	r24, r16
     a74:	b7 01       	movw	r22, r14
     a76:	0e 94 97 05 	call	0xb2e	; 0xb2e <__clzsi2>
     a7a:	fc 01       	movw	r30, r24
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	f7 ff       	sbrs	r31, 7
     a80:	3b c0       	rjmp	.+118    	; 0xaf8 <__floatunsisf+0xbc>
     a82:	22 27       	eor	r18, r18
     a84:	33 27       	eor	r19, r19
     a86:	2e 1b       	sub	r18, r30
     a88:	3f 0b       	sbc	r19, r31
     a8a:	57 01       	movw	r10, r14
     a8c:	68 01       	movw	r12, r16
     a8e:	02 2e       	mov	r0, r18
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__floatunsisf+0x5e>
     a92:	d6 94       	lsr	r13
     a94:	c7 94       	ror	r12
     a96:	b7 94       	ror	r11
     a98:	a7 94       	ror	r10
     a9a:	0a 94       	dec	r0
     a9c:	d2 f7       	brpl	.-12     	; 0xa92 <__floatunsisf+0x56>
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	a0 e0       	ldi	r26, 0x00	; 0
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <__floatunsisf+0x7c>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	aa 1f       	adc	r26, r26
     ab6:	bb 1f       	adc	r27, r27
     ab8:	2a 95       	dec	r18
     aba:	d2 f7       	brpl	.-12     	; 0xab0 <__floatunsisf+0x74>
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	a1 09       	sbc	r26, r1
     ac0:	b1 09       	sbc	r27, r1
     ac2:	8e 21       	and	r24, r14
     ac4:	9f 21       	and	r25, r15
     ac6:	a0 23       	and	r26, r16
     ac8:	b1 23       	and	r27, r17
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	a1 05       	cpc	r26, r1
     ace:	b1 05       	cpc	r27, r1
     ad0:	21 f0       	breq	.+8      	; 0xada <__floatunsisf+0x9e>
     ad2:	41 e0       	ldi	r20, 0x01	; 1
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	4a 29       	or	r20, r10
     adc:	5b 29       	or	r21, r11
     ade:	6c 29       	or	r22, r12
     ae0:	7d 29       	or	r23, r13
     ae2:	4d 83       	std	Y+5, r20	; 0x05
     ae4:	5e 83       	std	Y+6, r21	; 0x06
     ae6:	6f 83       	std	Y+7, r22	; 0x07
     ae8:	78 87       	std	Y+8, r23	; 0x08
     aea:	8e e1       	ldi	r24, 0x1E	; 30
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	8e 1b       	sub	r24, r30
     af0:	9f 0b       	sbc	r25, r31
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	8b 83       	std	Y+3, r24	; 0x03
     af6:	12 c0       	rjmp	.+36     	; 0xb1c <__floatunsisf+0xe0>
     af8:	30 97       	sbiw	r30, 0x00	; 0
     afa:	81 f0       	breq	.+32     	; 0xb1c <__floatunsisf+0xe0>
     afc:	0e 2e       	mov	r0, r30
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__floatunsisf+0xcc>
     b00:	ee 0c       	add	r14, r14
     b02:	ff 1c       	adc	r15, r15
     b04:	00 1f       	adc	r16, r16
     b06:	11 1f       	adc	r17, r17
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__floatunsisf+0xc4>
     b0c:	ed 82       	std	Y+5, r14	; 0x05
     b0e:	fe 82       	std	Y+6, r15	; 0x06
     b10:	0f 83       	std	Y+7, r16	; 0x07
     b12:	18 87       	std	Y+8, r17	; 0x08
     b14:	ce 1a       	sub	r12, r30
     b16:	df 0a       	sbc	r13, r31
     b18:	dc 82       	std	Y+4, r13	; 0x04
     b1a:	cb 82       	std	Y+3, r12	; 0x03
     b1c:	1a 82       	std	Y+2, r1	; 0x02
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__pack_f>
     b26:	28 96       	adiw	r28, 0x08	; 8
     b28:	ea e0       	ldi	r30, 0x0A	; 10
     b2a:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__epilogue_restores__+0x10>

00000b2e <__clzsi2>:
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	7b 01       	movw	r14, r22
     b38:	8c 01       	movw	r16, r24
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	e8 16       	cp	r14, r24
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	f8 06       	cpc	r15, r24
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	08 07       	cpc	r16, r24
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	18 07       	cpc	r17, r24
     b4a:	88 f4       	brcc	.+34     	; 0xb6e <__clzsi2+0x40>
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	e8 16       	cp	r14, r24
     b50:	f1 04       	cpc	r15, r1
     b52:	01 05       	cpc	r16, r1
     b54:	11 05       	cpc	r17, r1
     b56:	31 f0       	breq	.+12     	; 0xb64 <__clzsi2+0x36>
     b58:	28 f0       	brcs	.+10     	; 0xb64 <__clzsi2+0x36>
     b5a:	88 e0       	ldi	r24, 0x08	; 8
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	17 c0       	rjmp	.+46     	; 0xb92 <__clzsi2+0x64>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	12 c0       	rjmp	.+36     	; 0xb92 <__clzsi2+0x64>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	e8 16       	cp	r14, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	f8 06       	cpc	r15, r24
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	08 07       	cpc	r16, r24
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	18 07       	cpc	r17, r24
     b7e:	28 f0       	brcs	.+10     	; 0xb8a <__clzsi2+0x5c>
     b80:	88 e1       	ldi	r24, 0x18	; 24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__clzsi2+0x64>
     b8a:	80 e1       	ldi	r24, 0x10	; 16
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	20 e2       	ldi	r18, 0x20	; 32
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	28 1b       	sub	r18, r24
     b9c:	39 0b       	sbc	r19, r25
     b9e:	4a 0b       	sbc	r20, r26
     ba0:	5b 0b       	sbc	r21, r27
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__clzsi2+0x7e>
     ba4:	16 95       	lsr	r17
     ba6:	07 95       	ror	r16
     ba8:	f7 94       	ror	r15
     baa:	e7 94       	ror	r14
     bac:	8a 95       	dec	r24
     bae:	d2 f7       	brpl	.-12     	; 0xba4 <__clzsi2+0x76>
     bb0:	f7 01       	movw	r30, r14
     bb2:	e8 57       	subi	r30, 0x78	; 120
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	80 81       	ld	r24, Z
     bb8:	28 1b       	sub	r18, r24
     bba:	31 09       	sbc	r19, r1
     bbc:	41 09       	sbc	r20, r1
     bbe:	51 09       	sbc	r21, r1
     bc0:	c9 01       	movw	r24, r18
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <__pack_f>:
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	fc 01       	movw	r30, r24
     bd8:	e4 80       	ldd	r14, Z+4	; 0x04
     bda:	f5 80       	ldd	r15, Z+5	; 0x05
     bdc:	06 81       	ldd	r16, Z+6	; 0x06
     bde:	17 81       	ldd	r17, Z+7	; 0x07
     be0:	d1 80       	ldd	r13, Z+1	; 0x01
     be2:	80 81       	ld	r24, Z
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	48 f4       	brcc	.+18     	; 0xbfa <__pack_f+0x2e>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	a0 e1       	ldi	r26, 0x10	; 16
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e8 2a       	or	r14, r24
     bf2:	f9 2a       	or	r15, r25
     bf4:	0a 2b       	or	r16, r26
     bf6:	1b 2b       	or	r17, r27
     bf8:	a5 c0       	rjmp	.+330    	; 0xd44 <__pack_f+0x178>
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	09 f4       	brne	.+2      	; 0xc00 <__pack_f+0x34>
     bfe:	9f c0       	rjmp	.+318    	; 0xd3e <__pack_f+0x172>
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	21 f4       	brne	.+8      	; 0xc0c <__pack_f+0x40>
     c04:	ee 24       	eor	r14, r14
     c06:	ff 24       	eor	r15, r15
     c08:	87 01       	movw	r16, r14
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <__pack_f+0x4a>
     c0c:	e1 14       	cp	r14, r1
     c0e:	f1 04       	cpc	r15, r1
     c10:	01 05       	cpc	r16, r1
     c12:	11 05       	cpc	r17, r1
     c14:	19 f4       	brne	.+6      	; 0xc1c <__pack_f+0x50>
     c16:	e0 e0       	ldi	r30, 0x00	; 0
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	96 c0       	rjmp	.+300    	; 0xd48 <__pack_f+0x17c>
     c1c:	62 81       	ldd	r22, Z+2	; 0x02
     c1e:	73 81       	ldd	r23, Z+3	; 0x03
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	62 38       	cpi	r22, 0x82	; 130
     c24:	79 07       	cpc	r23, r25
     c26:	0c f0       	brlt	.+2      	; 0xc2a <__pack_f+0x5e>
     c28:	5b c0       	rjmp	.+182    	; 0xce0 <__pack_f+0x114>
     c2a:	22 e8       	ldi	r18, 0x82	; 130
     c2c:	3f ef       	ldi	r19, 0xFF	; 255
     c2e:	26 1b       	sub	r18, r22
     c30:	37 0b       	sbc	r19, r23
     c32:	2a 31       	cpi	r18, 0x1A	; 26
     c34:	31 05       	cpc	r19, r1
     c36:	2c f0       	brlt	.+10     	; 0xc42 <__pack_f+0x76>
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	2a c0       	rjmp	.+84     	; 0xc96 <__pack_f+0xca>
     c42:	b8 01       	movw	r22, r16
     c44:	a7 01       	movw	r20, r14
     c46:	02 2e       	mov	r0, r18
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <__pack_f+0x86>
     c4a:	76 95       	lsr	r23
     c4c:	67 95       	ror	r22
     c4e:	57 95       	ror	r21
     c50:	47 95       	ror	r20
     c52:	0a 94       	dec	r0
     c54:	d2 f7       	brpl	.-12     	; 0xc4a <__pack_f+0x7e>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <__pack_f+0x9c>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	aa 1f       	adc	r26, r26
     c66:	bb 1f       	adc	r27, r27
     c68:	2a 95       	dec	r18
     c6a:	d2 f7       	brpl	.-12     	; 0xc60 <__pack_f+0x94>
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	a1 09       	sbc	r26, r1
     c70:	b1 09       	sbc	r27, r1
     c72:	8e 21       	and	r24, r14
     c74:	9f 21       	and	r25, r15
     c76:	a0 23       	and	r26, r16
     c78:	b1 23       	and	r27, r17
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	21 f0       	breq	.+8      	; 0xc8a <__pack_f+0xbe>
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	9a 01       	movw	r18, r20
     c8c:	ab 01       	movw	r20, r22
     c8e:	28 2b       	or	r18, r24
     c90:	39 2b       	or	r19, r25
     c92:	4a 2b       	or	r20, r26
     c94:	5b 2b       	or	r21, r27
     c96:	da 01       	movw	r26, r20
     c98:	c9 01       	movw	r24, r18
     c9a:	8f 77       	andi	r24, 0x7F	; 127
     c9c:	90 70       	andi	r25, 0x00	; 0
     c9e:	a0 70       	andi	r26, 0x00	; 0
     ca0:	b0 70       	andi	r27, 0x00	; 0
     ca2:	80 34       	cpi	r24, 0x40	; 64
     ca4:	91 05       	cpc	r25, r1
     ca6:	a1 05       	cpc	r26, r1
     ca8:	b1 05       	cpc	r27, r1
     caa:	39 f4       	brne	.+14     	; 0xcba <__pack_f+0xee>
     cac:	27 ff       	sbrs	r18, 7
     cae:	09 c0       	rjmp	.+18     	; 0xcc2 <__pack_f+0xf6>
     cb0:	20 5c       	subi	r18, 0xC0	; 192
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	4f 4f       	sbci	r20, 0xFF	; 255
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__pack_f+0xf6>
     cba:	21 5c       	subi	r18, 0xC1	; 193
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	4f 4f       	sbci	r20, 0xFF	; 255
     cc0:	5f 4f       	sbci	r21, 0xFF	; 255
     cc2:	e0 e0       	ldi	r30, 0x00	; 0
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	3a 07       	cpc	r19, r26
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	4a 07       	cpc	r20, r26
     cd0:	a0 e4       	ldi	r26, 0x40	; 64
     cd2:	5a 07       	cpc	r21, r26
     cd4:	10 f0       	brcs	.+4      	; 0xcda <__pack_f+0x10e>
     cd6:	e1 e0       	ldi	r30, 0x01	; 1
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	79 01       	movw	r14, r18
     cdc:	8a 01       	movw	r16, r20
     cde:	27 c0       	rjmp	.+78     	; 0xd2e <__pack_f+0x162>
     ce0:	60 38       	cpi	r22, 0x80	; 128
     ce2:	71 05       	cpc	r23, r1
     ce4:	64 f5       	brge	.+88     	; 0xd3e <__pack_f+0x172>
     ce6:	fb 01       	movw	r30, r22
     ce8:	e1 58       	subi	r30, 0x81	; 129
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	d8 01       	movw	r26, r16
     cee:	c7 01       	movw	r24, r14
     cf0:	8f 77       	andi	r24, 0x7F	; 127
     cf2:	90 70       	andi	r25, 0x00	; 0
     cf4:	a0 70       	andi	r26, 0x00	; 0
     cf6:	b0 70       	andi	r27, 0x00	; 0
     cf8:	80 34       	cpi	r24, 0x40	; 64
     cfa:	91 05       	cpc	r25, r1
     cfc:	a1 05       	cpc	r26, r1
     cfe:	b1 05       	cpc	r27, r1
     d00:	39 f4       	brne	.+14     	; 0xd10 <__pack_f+0x144>
     d02:	e7 fe       	sbrs	r14, 7
     d04:	0d c0       	rjmp	.+26     	; 0xd20 <__pack_f+0x154>
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	a0 e0       	ldi	r26, 0x00	; 0
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <__pack_f+0x14c>
     d10:	8f e3       	ldi	r24, 0x3F	; 63
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	a0 e0       	ldi	r26, 0x00	; 0
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e8 0e       	add	r14, r24
     d1a:	f9 1e       	adc	r15, r25
     d1c:	0a 1f       	adc	r16, r26
     d1e:	1b 1f       	adc	r17, r27
     d20:	17 ff       	sbrs	r17, 7
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <__pack_f+0x162>
     d24:	16 95       	lsr	r17
     d26:	07 95       	ror	r16
     d28:	f7 94       	ror	r15
     d2a:	e7 94       	ror	r14
     d2c:	31 96       	adiw	r30, 0x01	; 1
     d2e:	87 e0       	ldi	r24, 0x07	; 7
     d30:	16 95       	lsr	r17
     d32:	07 95       	ror	r16
     d34:	f7 94       	ror	r15
     d36:	e7 94       	ror	r14
     d38:	8a 95       	dec	r24
     d3a:	d1 f7       	brne	.-12     	; 0xd30 <__pack_f+0x164>
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <__pack_f+0x17c>
     d3e:	ee 24       	eor	r14, r14
     d40:	ff 24       	eor	r15, r15
     d42:	87 01       	movw	r16, r14
     d44:	ef ef       	ldi	r30, 0xFF	; 255
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	6e 2f       	mov	r22, r30
     d4a:	67 95       	ror	r22
     d4c:	66 27       	eor	r22, r22
     d4e:	67 95       	ror	r22
     d50:	90 2f       	mov	r25, r16
     d52:	9f 77       	andi	r25, 0x7F	; 127
     d54:	d7 94       	ror	r13
     d56:	dd 24       	eor	r13, r13
     d58:	d7 94       	ror	r13
     d5a:	8e 2f       	mov	r24, r30
     d5c:	86 95       	lsr	r24
     d5e:	49 2f       	mov	r20, r25
     d60:	46 2b       	or	r20, r22
     d62:	58 2f       	mov	r21, r24
     d64:	5d 29       	or	r21, r13
     d66:	b7 01       	movw	r22, r14
     d68:	ca 01       	movw	r24, r20
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	08 95       	ret

00000d76 <__unpack_f>:
     d76:	fc 01       	movw	r30, r24
     d78:	db 01       	movw	r26, r22
     d7a:	40 81       	ld	r20, Z
     d7c:	51 81       	ldd	r21, Z+1	; 0x01
     d7e:	22 81       	ldd	r18, Z+2	; 0x02
     d80:	62 2f       	mov	r22, r18
     d82:	6f 77       	andi	r22, 0x7F	; 127
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	22 1f       	adc	r18, r18
     d88:	22 27       	eor	r18, r18
     d8a:	22 1f       	adc	r18, r18
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	89 2f       	mov	r24, r25
     d90:	88 0f       	add	r24, r24
     d92:	82 2b       	or	r24, r18
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	99 1f       	adc	r25, r25
     d9a:	99 27       	eor	r25, r25
     d9c:	99 1f       	adc	r25, r25
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	9c 93       	st	X, r25
     da2:	11 97       	sbiw	r26, 0x01	; 1
     da4:	21 15       	cp	r18, r1
     da6:	31 05       	cpc	r19, r1
     da8:	a9 f5       	brne	.+106    	; 0xe14 <__unpack_f+0x9e>
     daa:	41 15       	cp	r20, r1
     dac:	51 05       	cpc	r21, r1
     dae:	61 05       	cpc	r22, r1
     db0:	71 05       	cpc	r23, r1
     db2:	11 f4       	brne	.+4      	; 0xdb8 <__unpack_f+0x42>
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	37 c0       	rjmp	.+110    	; 0xe26 <__unpack_f+0xb0>
     db8:	82 e8       	ldi	r24, 0x82	; 130
     dba:	9f ef       	ldi	r25, 0xFF	; 255
     dbc:	13 96       	adiw	r26, 0x03	; 3
     dbe:	9c 93       	st	X, r25
     dc0:	8e 93       	st	-X, r24
     dc2:	12 97       	sbiw	r26, 0x02	; 2
     dc4:	9a 01       	movw	r18, r20
     dc6:	ab 01       	movw	r20, r22
     dc8:	67 e0       	ldi	r22, 0x07	; 7
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	44 1f       	adc	r20, r20
     dd0:	55 1f       	adc	r21, r21
     dd2:	6a 95       	dec	r22
     dd4:	d1 f7       	brne	.-12     	; 0xdca <__unpack_f+0x54>
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	8c 93       	st	X, r24
     dda:	0d c0       	rjmp	.+26     	; 0xdf6 <__unpack_f+0x80>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	12 96       	adiw	r26, 0x02	; 2
     de6:	8d 91       	ld	r24, X+
     de8:	9c 91       	ld	r25, X
     dea:	13 97       	sbiw	r26, 0x03	; 3
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	20 30       	cpi	r18, 0x00	; 0
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	38 07       	cpc	r19, r24
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	48 07       	cpc	r20, r24
     e00:	80 e4       	ldi	r24, 0x40	; 64
     e02:	58 07       	cpc	r21, r24
     e04:	58 f3       	brcs	.-42     	; 0xddc <__unpack_f+0x66>
     e06:	14 96       	adiw	r26, 0x04	; 4
     e08:	2d 93       	st	X+, r18
     e0a:	3d 93       	st	X+, r19
     e0c:	4d 93       	st	X+, r20
     e0e:	5c 93       	st	X, r21
     e10:	17 97       	sbiw	r26, 0x07	; 7
     e12:	08 95       	ret
     e14:	2f 3f       	cpi	r18, 0xFF	; 255
     e16:	31 05       	cpc	r19, r1
     e18:	79 f4       	brne	.+30     	; 0xe38 <__unpack_f+0xc2>
     e1a:	41 15       	cp	r20, r1
     e1c:	51 05       	cpc	r21, r1
     e1e:	61 05       	cpc	r22, r1
     e20:	71 05       	cpc	r23, r1
     e22:	19 f4       	brne	.+6      	; 0xe2a <__unpack_f+0xb4>
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	8c 93       	st	X, r24
     e28:	08 95       	ret
     e2a:	64 ff       	sbrs	r22, 4
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <__unpack_f+0xbe>
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	8c 93       	st	X, r24
     e32:	12 c0       	rjmp	.+36     	; 0xe58 <__unpack_f+0xe2>
     e34:	1c 92       	st	X, r1
     e36:	10 c0       	rjmp	.+32     	; 0xe58 <__unpack_f+0xe2>
     e38:	2f 57       	subi	r18, 0x7F	; 127
     e3a:	30 40       	sbci	r19, 0x00	; 0
     e3c:	13 96       	adiw	r26, 0x03	; 3
     e3e:	3c 93       	st	X, r19
     e40:	2e 93       	st	-X, r18
     e42:	12 97       	sbiw	r26, 0x02	; 2
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	8c 93       	st	X, r24
     e48:	87 e0       	ldi	r24, 0x07	; 7
     e4a:	44 0f       	add	r20, r20
     e4c:	55 1f       	adc	r21, r21
     e4e:	66 1f       	adc	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	8a 95       	dec	r24
     e54:	d1 f7       	brne	.-12     	; 0xe4a <__unpack_f+0xd4>
     e56:	70 64       	ori	r23, 0x40	; 64
     e58:	14 96       	adiw	r26, 0x04	; 4
     e5a:	4d 93       	st	X+, r20
     e5c:	5d 93       	st	X+, r21
     e5e:	6d 93       	st	X+, r22
     e60:	7c 93       	st	X, r23
     e62:	17 97       	sbiw	r26, 0x07	; 7
     e64:	08 95       	ret

00000e66 <__fpcmp_parts_f>:
     e66:	1f 93       	push	r17
     e68:	dc 01       	movw	r26, r24
     e6a:	fb 01       	movw	r30, r22
     e6c:	9c 91       	ld	r25, X
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	08 f4       	brcc	.+2      	; 0xe74 <__fpcmp_parts_f+0xe>
     e72:	47 c0       	rjmp	.+142    	; 0xf02 <__fpcmp_parts_f+0x9c>
     e74:	80 81       	ld	r24, Z
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	08 f4       	brcc	.+2      	; 0xe7c <__fpcmp_parts_f+0x16>
     e7a:	43 c0       	rjmp	.+134    	; 0xf02 <__fpcmp_parts_f+0x9c>
     e7c:	94 30       	cpi	r25, 0x04	; 4
     e7e:	51 f4       	brne	.+20     	; 0xe94 <__fpcmp_parts_f+0x2e>
     e80:	11 96       	adiw	r26, 0x01	; 1
     e82:	1c 91       	ld	r17, X
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	99 f5       	brne	.+102    	; 0xeee <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	68 2f       	mov	r22, r24
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	61 1b       	sub	r22, r17
     e90:	71 09       	sbc	r23, r1
     e92:	3f c0       	rjmp	.+126    	; 0xf12 <__fpcmp_parts_f+0xac>
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	21 f0       	breq	.+8      	; 0xea0 <__fpcmp_parts_f+0x3a>
     e98:	92 30       	cpi	r25, 0x02	; 2
     e9a:	31 f4       	brne	.+12     	; 0xea8 <__fpcmp_parts_f+0x42>
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	b9 f1       	breq	.+110    	; 0xf0e <__fpcmp_parts_f+0xa8>
     ea0:	81 81       	ldd	r24, Z+1	; 0x01
     ea2:	88 23       	and	r24, r24
     ea4:	89 f1       	breq	.+98     	; 0xf08 <__fpcmp_parts_f+0xa2>
     ea6:	2d c0       	rjmp	.+90     	; 0xf02 <__fpcmp_parts_f+0x9c>
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	1c 91       	ld	r17, X
     eac:	11 97       	sbiw	r26, 0x01	; 1
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	f1 f0       	breq	.+60     	; 0xeee <__fpcmp_parts_f+0x88>
     eb2:	81 81       	ldd	r24, Z+1	; 0x01
     eb4:	18 17       	cp	r17, r24
     eb6:	d9 f4       	brne	.+54     	; 0xeee <__fpcmp_parts_f+0x88>
     eb8:	12 96       	adiw	r26, 0x02	; 2
     eba:	2d 91       	ld	r18, X+
     ebc:	3c 91       	ld	r19, X
     ebe:	13 97       	sbiw	r26, 0x03	; 3
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	82 17       	cp	r24, r18
     ec6:	93 07       	cpc	r25, r19
     ec8:	94 f0       	brlt	.+36     	; 0xeee <__fpcmp_parts_f+0x88>
     eca:	28 17       	cp	r18, r24
     ecc:	39 07       	cpc	r19, r25
     ece:	bc f0       	brlt	.+46     	; 0xefe <__fpcmp_parts_f+0x98>
     ed0:	14 96       	adiw	r26, 0x04	; 4
     ed2:	8d 91       	ld	r24, X+
     ed4:	9d 91       	ld	r25, X+
     ed6:	0d 90       	ld	r0, X+
     ed8:	bc 91       	ld	r27, X
     eda:	a0 2d       	mov	r26, r0
     edc:	24 81       	ldd	r18, Z+4	; 0x04
     ede:	35 81       	ldd	r19, Z+5	; 0x05
     ee0:	46 81       	ldd	r20, Z+6	; 0x06
     ee2:	57 81       	ldd	r21, Z+7	; 0x07
     ee4:	28 17       	cp	r18, r24
     ee6:	39 07       	cpc	r19, r25
     ee8:	4a 07       	cpc	r20, r26
     eea:	5b 07       	cpc	r21, r27
     eec:	18 f4       	brcc	.+6      	; 0xef4 <__fpcmp_parts_f+0x8e>
     eee:	11 23       	and	r17, r17
     ef0:	41 f0       	breq	.+16     	; 0xf02 <__fpcmp_parts_f+0x9c>
     ef2:	0a c0       	rjmp	.+20     	; 0xf08 <__fpcmp_parts_f+0xa2>
     ef4:	82 17       	cp	r24, r18
     ef6:	93 07       	cpc	r25, r19
     ef8:	a4 07       	cpc	r26, r20
     efa:	b5 07       	cpc	r27, r21
     efc:	40 f4       	brcc	.+16     	; 0xf0e <__fpcmp_parts_f+0xa8>
     efe:	11 23       	and	r17, r17
     f00:	19 f0       	breq	.+6      	; 0xf08 <__fpcmp_parts_f+0xa2>
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <__fpcmp_parts_f+0xac>
     f08:	6f ef       	ldi	r22, 0xFF	; 255
     f0a:	7f ef       	ldi	r23, 0xFF	; 255
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <__fpcmp_parts_f+0xac>
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	cb 01       	movw	r24, r22
     f14:	1f 91       	pop	r17
     f16:	08 95       	ret

00000f18 <PWM_Timer0_Start>:
 * Timer0 will be used with pre-scaler F_CPU/8
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void PWM_Timer0_Start(uint8 duty_cycle){
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	0f 92       	push	r0
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
     f24:	e2 e5       	ldi	r30, 0x52	; 82
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	10 82       	st	Z, r1

	OCR0  = (uint8)(((uint16)duty_cycle*255)/(100)); //Set Compare value
     f2a:	ec e5       	ldi	r30, 0x5C	; 92
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	48 2f       	mov	r20, r24
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	ca 01       	movw	r24, r20
     f36:	9c 01       	movw	r18, r24
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	c9 01       	movw	r24, r18
     f3e:	96 95       	lsr	r25
     f40:	98 2f       	mov	r25, r24
     f42:	88 27       	eor	r24, r24
     f44:	97 95       	ror	r25
     f46:	87 95       	ror	r24
     f48:	82 1b       	sub	r24, r18
     f4a:	93 0b       	sbc	r25, r19
     f4c:	84 0f       	add	r24, r20
     f4e:	95 1f       	adc	r25, r21
     f50:	24 e6       	ldi	r18, 0x64	; 100
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	b9 01       	movw	r22, r18
     f56:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodhi4>
     f5a:	cb 01       	movw	r24, r22
     f5c:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID,PIN3_ID, LOGIC_HIGH); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	63 e0       	ldi	r22, 0x03	; 3
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 bc 07 	call	0xf78	; 0xf78 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     f68:	e3 e5       	ldi	r30, 0x53	; 83
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	8a e6       	ldi	r24, 0x6A	; 106
     f6e:	80 83       	st	Z, r24
}
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <GPIO_setupPinDirection+0x6>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <GPIO_setupPinDirection+0x8>
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	6a 83       	std	Y+2, r22	; 0x02
     f8a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	84 30       	cpi	r24, 0x04	; 4
     f90:	08 f0       	brcs	.+2      	; 0xf94 <GPIO_setupPinDirection+0x1c>
     f92:	d5 c0       	rjmp	.+426    	; 0x113e <GPIO_setupPinDirection+0x1c6>
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	88 30       	cpi	r24, 0x08	; 8
     f98:	08 f0       	brcs	.+2      	; 0xf9c <GPIO_setupPinDirection+0x24>
     f9a:	d1 c0       	rjmp	.+418    	; 0x113e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		switch (port_num) {
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 83       	std	Y+5, r19	; 0x05
     fa4:	2c 83       	std	Y+4, r18	; 0x04
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <GPIO_setupPinDirection+0x3a>
     fb0:	43 c0       	rjmp	.+134    	; 0x1038 <GPIO_setupPinDirection+0xc0>
     fb2:	2c 81       	ldd	r18, Y+4	; 0x04
     fb4:	3d 81       	ldd	r19, Y+5	; 0x05
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	31 05       	cpc	r19, r1
     fba:	2c f4       	brge	.+10     	; 0xfc6 <GPIO_setupPinDirection+0x4e>
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <GPIO_setupPinDirection+0x68>
     fc4:	bc c0       	rjmp	.+376    	; 0x113e <GPIO_setupPinDirection+0x1c6>
     fc6:	2c 81       	ldd	r18, Y+4	; 0x04
     fc8:	3d 81       	ldd	r19, Y+5	; 0x05
     fca:	22 30       	cpi	r18, 0x02	; 2
     fcc:	31 05       	cpc	r19, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <GPIO_setupPinDirection+0x5a>
     fd0:	5f c0       	rjmp	.+190    	; 0x1090 <GPIO_setupPinDirection+0x118>
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	83 30       	cpi	r24, 0x03	; 3
     fd8:	91 05       	cpc	r25, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <GPIO_setupPinDirection+0x66>
     fdc:	85 c0       	rjmp	.+266    	; 0x10e8 <GPIO_setupPinDirection+0x170>
     fde:	af c0       	rjmp	.+350    	; 0x113e <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	a1 f4       	brne	.+40     	; 0x100e <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);        /* This line is equivalent to 	DDRA |= (1 << pin_num);  */
     fe6:	aa e3       	ldi	r26, 0x3A	; 58
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ea e3       	ldi	r30, 0x3A	; 58
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_setupPinDirection+0x8c>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_setupPinDirection+0x88>
    1008:	84 2b       	or	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	98 c0       	rjmp	.+304    	; 0x113e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);      /* This line is equivalent to 	DDRA &= ~(1 << pin_num); */
    100e:	aa e3       	ldi	r26, 0x3A	; 58
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ea e3       	ldi	r30, 0x3A	; 58
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <GPIO_setupPinDirection+0xb4>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <GPIO_setupPinDirection+0xb0>
    1030:	80 95       	com	r24
    1032:	84 23       	and	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	83 c0       	rjmp	.+262    	; 0x113e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	a1 f4       	brne	.+40     	; 0x1066 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);        /* This line is equivalent to 	DDRB |= (1 << pin_num);  */
    103e:	a7 e3       	ldi	r26, 0x37	; 55
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e7 e3       	ldi	r30, 0x37	; 55
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_setupPinDirection+0xe4>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_setupPinDirection+0xe0>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	6c c0       	rjmp	.+216    	; 0x113e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);      /* This line is equivalent to 	DDRB &= ~(1 << pin_num); */
    1066:	a7 e3       	ldi	r26, 0x37	; 55
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e7 e3       	ldi	r30, 0x37	; 55
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <GPIO_setupPinDirection+0x10c>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <GPIO_setupPinDirection+0x108>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	57 c0       	rjmp	.+174    	; 0x113e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	a1 f4       	brne	.+40     	; 0x10be <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);        /* This line is equivalent to 	DDRC |= (1 << pin_num);  */
    1096:	a4 e3       	ldi	r26, 0x34	; 52
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e4 e3       	ldi	r30, 0x34	; 52
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_setupPinDirection+0x13c>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_setupPinDirection+0x138>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	40 c0       	rjmp	.+128    	; 0x113e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);      /* This line is equivalent to 	DDRC &= ~(1 << pin_num); */
    10be:	a4 e3       	ldi	r26, 0x34	; 52
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e4 e3       	ldi	r30, 0x34	; 52
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <GPIO_setupPinDirection+0x164>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <GPIO_setupPinDirection+0x160>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	2b c0       	rjmp	.+86     	; 0x113e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	a1 f4       	brne	.+40     	; 0x1116 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);        /* This line is equivalent to 	DDRD |= (1 << pin_num);  */
    10ee:	a1 e3       	ldi	r26, 0x31	; 49
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e1 e3       	ldi	r30, 0x31	; 49
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_setupPinDirection+0x194>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_setupPinDirection+0x190>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	14 c0       	rjmp	.+40     	; 0x113e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);      /* This line is equivalent to 	DDRD &= ~(1 << pin_num); */
    1116:	a1 e3       	ldi	r26, 0x31	; 49
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e1 e3       	ldi	r30, 0x31	; 49
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <GPIO_setupPinDirection+0x1bc>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <GPIO_setupPinDirection+0x1b8>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <GPIO_writePin+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <GPIO_writePin+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
	/*
	* Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	* Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
    * In this case the input is not valid port/pin number
	*/
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	08 f0       	brcs	.+2      	; 0x116a <GPIO_writePin+0x1c>
    1168:	d5 c0       	rjmp	.+426    	; 0x1314 <GPIO_writePin+0x1c6>
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	88 30       	cpi	r24, 0x08	; 8
    116e:	08 f0       	brcs	.+2      	; 0x1172 <GPIO_writePin+0x24>
    1170:	d1 c0       	rjmp	.+418    	; 0x1314 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		switch (port_num) {
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3d 83       	std	Y+5, r19	; 0x05
    117a:	2c 83       	std	Y+4, r18	; 0x04
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <GPIO_writePin+0x3a>
    1186:	43 c0       	rjmp	.+134    	; 0x120e <GPIO_writePin+0xc0>
    1188:	2c 81       	ldd	r18, Y+4	; 0x04
    118a:	3d 81       	ldd	r19, Y+5	; 0x05
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	2c f4       	brge	.+10     	; 0x119c <GPIO_writePin+0x4e>
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	71 f0       	breq	.+28     	; 0x11b6 <GPIO_writePin+0x68>
    119a:	bc c0       	rjmp	.+376    	; 0x1314 <GPIO_writePin+0x1c6>
    119c:	2c 81       	ldd	r18, Y+4	; 0x04
    119e:	3d 81       	ldd	r19, Y+5	; 0x05
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <GPIO_writePin+0x5a>
    11a6:	5f c0       	rjmp	.+190    	; 0x1266 <GPIO_writePin+0x118>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	91 05       	cpc	r25, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <GPIO_writePin+0x66>
    11b2:	85 c0       	rjmp	.+266    	; 0x12be <GPIO_writePin+0x170>
    11b4:	af c0       	rjmp	.+350    	; 0x1314 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a1 f4       	brne	.+40     	; 0x11e4 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);        /* This line is equivalent to 	PORTA |= (1 << pin_num); */
    11bc:	ab e3       	ldi	r26, 0x3B	; 59
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e3       	ldi	r30, 0x3B	; 59
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_writePin+0x8c>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_writePin+0x88>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	98 c0       	rjmp	.+304    	; 0x1314 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);      /* This line is equivalent to 	PORTA &= ~(1 << pin_num); */
    11e4:	ab e3       	ldi	r26, 0x3B	; 59
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	eb e3       	ldi	r30, 0x3B	; 59
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_writePin+0xb4>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_writePin+0xb0>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	83 c0       	rjmp	.+262    	; 0x1314 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	a1 f4       	brne	.+40     	; 0x123c <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);        /* This line is equivalent to 	PORTB |= (1 << pin_num); */
    1214:	a8 e3       	ldi	r26, 0x38	; 56
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e8 e3       	ldi	r30, 0x38	; 56
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <GPIO_writePin+0xe4>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <GPIO_writePin+0xe0>
    1236:	84 2b       	or	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	6c c0       	rjmp	.+216    	; 0x1314 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);      /* This line is equivalent to 	PORTB &= ~(1 << pin_num); */
    123c:	a8 e3       	ldi	r26, 0x38	; 56
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e8 e3       	ldi	r30, 0x38	; 56
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <GPIO_writePin+0x10c>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <GPIO_writePin+0x108>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	57 c0       	rjmp	.+174    	; 0x1314 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	a1 f4       	brne	.+40     	; 0x1294 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);        /* This line is equivalent to 	PORTC |= (1 << pin_num); */
    126c:	a5 e3       	ldi	r26, 0x35	; 53
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e3       	ldi	r30, 0x35	; 53
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_writePin+0x13c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_writePin+0x138>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	40 c0       	rjmp	.+128    	; 0x1314 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);      /* This line is equivalent to 	PORTC &= ~(1 << pin_num); */
    1294:	a5 e3       	ldi	r26, 0x35	; 53
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e3       	ldi	r30, 0x35	; 53
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <GPIO_writePin+0x164>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <GPIO_writePin+0x160>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	2b c0       	rjmp	.+86     	; 0x1314 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	a1 f4       	brne	.+40     	; 0x12ec <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);        /* This line is equivalent to 	PORTD |= (1 << pin_num); */
    12c4:	a2 e3       	ldi	r26, 0x32	; 50
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e2 e3       	ldi	r30, 0x32	; 50
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_writePin+0x194>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_writePin+0x190>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	14 c0       	rjmp	.+40     	; 0x1314 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);      /* This line is equivalent to 	PORTD &= ~(1 << pin_num); */
    12ec:	a2 e3       	ldi	r26, 0x32	; 50
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e2 e3       	ldi	r30, 0x32	; 50
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_writePin+0x1bc>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_writePin+0x1b8>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <GPIO_readPin+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_readPin+0x8>
    132c:	00 d0       	rcall	.+0      	; 0x132e <GPIO_readPin+0xa>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	8a 83       	std	Y+2, r24	; 0x02
    1334:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pin_value = LOGIC_LOW;
    1336:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	18 f4       	brcc	.+6      	; 0x1344 <GPIO_readPin+0x20>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 30       	cpi	r24, 0x08	; 8
    1342:	10 f0       	brcs	.+4      	; 0x1348 <GPIO_readPin+0x24>
		return LOGIC_LOW;
    1344:	1e 82       	std	Y+6, r1	; 0x06
    1346:	82 c0       	rjmp	.+260    	; 0x144c <GPIO_readPin+0x128>
	} else {
		switch (port_num) {
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3d 83       	std	Y+5, r19	; 0x05
    1350:	2c 83       	std	Y+4, r18	; 0x04
    1352:	4c 81       	ldd	r20, Y+4	; 0x04
    1354:	5d 81       	ldd	r21, Y+5	; 0x05
    1356:	41 30       	cpi	r20, 0x01	; 1
    1358:	51 05       	cpc	r21, r1
    135a:	79 f1       	breq	.+94     	; 0x13ba <GPIO_readPin+0x96>
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	91 05       	cpc	r25, r1
    1364:	34 f4       	brge	.+12     	; 0x1372 <GPIO_readPin+0x4e>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	21 15       	cp	r18, r1
    136c:	31 05       	cpc	r19, r1
    136e:	69 f0       	breq	.+26     	; 0x138a <GPIO_readPin+0x66>
    1370:	6b c0       	rjmp	.+214    	; 0x1448 <GPIO_readPin+0x124>
    1372:	4c 81       	ldd	r20, Y+4	; 0x04
    1374:	5d 81       	ldd	r21, Y+5	; 0x05
    1376:	42 30       	cpi	r20, 0x02	; 2
    1378:	51 05       	cpc	r21, r1
    137a:	b9 f1       	breq	.+110    	; 0x13ea <GPIO_readPin+0xc6>
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <GPIO_readPin+0x64>
    1386:	49 c0       	rjmp	.+146    	; 0x141a <GPIO_readPin+0xf6>
    1388:	5f c0       	rjmp	.+190    	; 0x1448 <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PORTA, pin_num)) {
    138a:	eb e3       	ldi	r30, 0x3B	; 59
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_readPin+0x7e>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_readPin+0x7a>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	90 70       	andi	r25, 0x00	; 0
    13ac:	88 23       	and	r24, r24
    13ae:	19 f0       	breq	.+6      	; 0x13b6 <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	49 c0       	rjmp	.+146    	; 0x1448 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    13b6:	19 82       	std	Y+1, r1	; 0x01
    13b8:	47 c0       	rjmp	.+142    	; 0x1448 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PORTB, pin_num)) {
    13ba:	e8 e3       	ldi	r30, 0x38	; 56
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_readPin+0xae>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_readPin+0xaa>
    13d6:	ca 01       	movw	r24, r20
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	90 70       	andi	r25, 0x00	; 0
    13dc:	88 23       	and	r24, r24
    13de:	19 f0       	breq	.+6      	; 0x13e6 <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	31 c0       	rjmp	.+98     	; 0x1448 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    13e6:	19 82       	std	Y+1, r1	; 0x01
    13e8:	2f c0       	rjmp	.+94     	; 0x1448 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PORTC, pin_num)) {
    13ea:	e5 e3       	ldi	r30, 0x35	; 53
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a9 01       	movw	r20, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_readPin+0xde>
    13fe:	55 95       	asr	r21
    1400:	47 95       	ror	r20
    1402:	8a 95       	dec	r24
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_readPin+0xda>
    1406:	ca 01       	movw	r24, r20
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	90 70       	andi	r25, 0x00	; 0
    140c:	88 23       	and	r24, r24
    140e:	19 f0       	breq	.+6      	; 0x1416 <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	19 c0       	rjmp	.+50     	; 0x1448 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1416:	19 82       	std	Y+1, r1	; 0x01
    1418:	17 c0       	rjmp	.+46     	; 0x1448 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PORTD, pin_num)) {
    141a:	e2 e3       	ldi	r30, 0x32	; 50
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_readPin+0x10e>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_readPin+0x10a>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	90 70       	andi	r25, 0x00	; 0
    143c:	88 23       	and	r24, r24
    143e:	19 f0       	breq	.+6      	; 0x1446 <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1446:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1448:	59 81       	ldd	r21, Y+1	; 0x01
    144a:	5e 83       	std	Y+6, r21	; 0x06
    144c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    144e:	26 96       	adiw	r28, 0x06	; 6
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <GPIO_setupPortDirection+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <GPIO_setupPortDirection+0x8>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	84 30       	cpi	r24, 0x04	; 4
    1474:	90 f5       	brcc	.+100    	; 0x14da <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3c 83       	std	Y+4, r19	; 0x04
    147e:	2b 83       	std	Y+3, r18	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	d1 f0       	breq	.+52     	; 0x14be <GPIO_setupPortDirection+0x5e>
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	2c f4       	brge	.+10     	; 0x149e <GPIO_setupPortDirection+0x3e>
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	61 f0       	breq	.+24     	; 0x14b4 <GPIO_setupPortDirection+0x54>
    149c:	1e c0       	rjmp	.+60     	; 0x14da <GPIO_setupPortDirection+0x7a>
    149e:	2b 81       	ldd	r18, Y+3	; 0x03
    14a0:	3c 81       	ldd	r19, Y+4	; 0x04
    14a2:	22 30       	cpi	r18, 0x02	; 2
    14a4:	31 05       	cpc	r19, r1
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <GPIO_setupPortDirection+0x68>
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	91 05       	cpc	r25, r1
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <GPIO_setupPortDirection+0x72>
    14b2:	13 c0       	rjmp	.+38     	; 0x14da <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14b4:	ea e3       	ldi	r30, 0x3A	; 58
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	80 83       	st	Z, r24
    14bc:	0e c0       	rjmp	.+28     	; 0x14da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14be:	e7 e3       	ldi	r30, 0x37	; 55
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	80 83       	st	Z, r24
    14c6:	09 c0       	rjmp	.+18     	; 0x14da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14c8:	e4 e3       	ldi	r30, 0x34	; 52
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	80 83       	st	Z, r24
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14d2:	e1 e3       	ldi	r30, 0x31	; 49
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <GPIO_writePort+0x6>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <GPIO_writePort+0x8>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	90 f5       	brcc	.+100    	; 0x1562 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3c 83       	std	Y+4, r19	; 0x04
    1506:	2b 83       	std	Y+3, r18	; 0x03
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	d1 f0       	breq	.+52     	; 0x1546 <GPIO_writePort+0x5e>
    1512:	2b 81       	ldd	r18, Y+3	; 0x03
    1514:	3c 81       	ldd	r19, Y+4	; 0x04
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <GPIO_writePort+0x3e>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 f0       	breq	.+24     	; 0x153c <GPIO_writePort+0x54>
    1524:	1e c0       	rjmp	.+60     	; 0x1562 <GPIO_writePort+0x7a>
    1526:	2b 81       	ldd	r18, Y+3	; 0x03
    1528:	3c 81       	ldd	r19, Y+4	; 0x04
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	81 f0       	breq	.+32     	; 0x1550 <GPIO_writePort+0x68>
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	81 f0       	breq	.+32     	; 0x155a <GPIO_writePort+0x72>
    153a:	13 c0       	rjmp	.+38     	; 0x1562 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    153c:	eb e3       	ldi	r30, 0x3B	; 59
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	80 83       	st	Z, r24
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	80 83       	st	Z, r24
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1550:	e5 e3       	ldi	r30, 0x35	; 53
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 83       	st	Z, r24
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    155a:	e2 e3       	ldi	r30, 0x32	; 50
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 83       	st	Z, r24
			break;
		}
	}
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <GPIO_readPort+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <GPIO_readPort+0x8>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    157e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	90 f5       	brcc	.+100    	; 0x15ea <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3c 83       	std	Y+4, r19	; 0x04
    158e:	2b 83       	std	Y+3, r18	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	d1 f0       	breq	.+52     	; 0x15ce <GPIO_readPort+0x5e>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	2c f4       	brge	.+10     	; 0x15ae <GPIO_readPort+0x3e>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	61 f0       	breq	.+24     	; 0x15c4 <GPIO_readPort+0x54>
    15ac:	1e c0       	rjmp	.+60     	; 0x15ea <GPIO_readPort+0x7a>
    15ae:	2b 81       	ldd	r18, Y+3	; 0x03
    15b0:	3c 81       	ldd	r19, Y+4	; 0x04
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	81 f0       	breq	.+32     	; 0x15d8 <GPIO_readPort+0x68>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	81 f0       	breq	.+32     	; 0x15e2 <GPIO_readPort+0x72>
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15c4:	e9 e3       	ldi	r30, 0x39	; 57
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	0e c0       	rjmp	.+28     	; 0x15ea <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15ce:	e6 e3       	ldi	r30, 0x36	; 54
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15d8:	e3 e3       	ldi	r30, 0x33	; 51
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15e2:	e0 e3       	ldi	r30, 0x30	; 48
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <ADC_init+0x6>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (Config_Ptr -> ref_volt << REFS0);
    1608:	a7 e2       	ldi	r26, 0x27	; 39
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e9 81       	ldd	r30, Y+1	; 0x01
    160e:	fa 81       	ldd	r31, Y+2	; 0x02
    1610:	80 81       	ld	r24, Z
    1612:	82 95       	swap	r24
    1614:	88 0f       	add	r24, r24
    1616:	88 0f       	add	r24, r24
    1618:	80 7c       	andi	r24, 0xC0	; 192
    161a:	8c 93       	st	X, r24
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */

	ADCSRA = (1<<ADEN);
    161c:	e6 e2       	ldi	r30, 0x26	; 38
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 e8       	ldi	r24, 0x80	; 128
    1622:	80 83       	st	Z, r24
	ADCSRA = (ADCSRA & 0xF8) | (Config_Ptr -> prescaler);
    1624:	a6 e2       	ldi	r26, 0x26	; 38
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e6 e2       	ldi	r30, 0x26	; 38
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	98 2f       	mov	r25, r24
    1630:	98 7f       	andi	r25, 0xF8	; 248
    1632:	e9 81       	ldd	r30, Y+1	; 0x01
    1634:	fa 81       	ldd	r31, Y+2	; 0x02
    1636:	81 81       	ldd	r24, Z+1	; 0x01
    1638:	89 2b       	or	r24, r25
    163a:	8c 93       	st	X, r24

}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	0f 92       	push	r0
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	87 70       	andi	r24, 0x07	; 7
    1656:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1658:	a7 e2       	ldi	r26, 0x27	; 39
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e7 e2       	ldi	r30, 0x27	; 39
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 7e       	andi	r24, 0xE0	; 224
    1664:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1666:	a7 e2       	ldi	r26, 0x27	; 39
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e7 e2       	ldi	r30, 0x27	; 39
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	90 81       	ld	r25, Z
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	89 2b       	or	r24, r25
    1674:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    1676:	a6 e2       	ldi	r26, 0x26	; 38
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e6 e2       	ldi	r30, 0x26	; 38
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	80 64       	ori	r24, 0x40	; 64
    1682:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    1684:	e6 e2       	ldi	r30, 0x26	; 38
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	80 71       	andi	r24, 0x10	; 16
    1690:	90 70       	andi	r25, 0x00	; 0
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	b9 f3       	breq	.-18     	; 0x1684 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    1696:	a6 e2       	ldi	r26, 0x26	; 38
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e6 e2       	ldi	r30, 0x26	; 38
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	80 61       	ori	r24, 0x10	; 16
    16a2:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    16a4:	e4 e2       	ldi	r30, 0x24	; 36
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
}
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <ADC_deInit>:

/*
 * Description: Function to disable the ADC definitions
 */
void ADC_deInit(void)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	/* Clear All ADC Registers */
	ADMUX = 0;
    16bc:	e7 e2       	ldi	r30, 0x27	; 39
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	10 82       	st	Z, r1
	ADCSRA = 0;
    16c2:	e6 e2       	ldi	r30, 0x26	; 38
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	10 82       	st	Z, r1

}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <LM35_getTemperature+0x6>
    16d4:	0f 92       	push	r0
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    16da:	1b 82       	std	Y+3, r1	; 0x03
	uint16 adc_value = 0;
    16dc:	1a 82       	std	Y+2, r1	; 0x02
    16de:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	0e 94 23 0b 	call	0x1646	; 0x1646 <ADC_readChannel>
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	cc 01       	movw	r24, r24
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	26 e9       	ldi	r18, 0x96	; 150
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 09 12 	call	0x2412	; 0x2412 <__mulsi3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__floatunsisf>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	37 ed       	ldi	r19, 0xD7	; 215
    171c:	43 e2       	ldi	r20, 0x23	; 35
    171e:	50 e4       	ldi	r21, 0x40	; 64
    1720:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	bc 01       	movw	r22, r24
    172a:	cd 01       	movw	r24, r26
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 ed       	ldi	r19, 0xD0	; 208
    1730:	4f eb       	ldi	r20, 0xBF	; 191
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	2e 97       	sbiw	r28, 0x0e	; 14
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	0e 94 bc 07 	call	0xf78	; 0xf78 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	62 e0       	ldi	r22, 0x02	; 2
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 bc 07 	call	0xf78	; 0xf78 <GPIO_setupPinDirection>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a0 ea       	ldi	r26, 0xA0	; 160
    1786:	b1 e4       	ldi	r27, 0x41	; 65
    1788:	8b 87       	std	Y+11, r24	; 0x0b
    178a:	9c 87       	std	Y+12, r25	; 0x0c
    178c:	ad 87       	std	Y+13, r26	; 0x0d
    178e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6b 85       	ldd	r22, Y+11	; 0x0b
    1792:	7c 85       	ldd	r23, Y+12	; 0x0c
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a e7       	ldi	r20, 0x7A	; 122
    179e:	53 e4       	ldi	r21, 0x43	; 67
    17a0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8f 83       	std	Y+7, r24	; 0x07
    17aa:	98 87       	std	Y+8, r25	; 0x08
    17ac:	a9 87       	std	Y+9, r26	; 0x09
    17ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <LCD_init+0x7a>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <LCD_init+0xf8>
	else if (__tmp > 65535)
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	4c f5       	brge	.+82     	; 0x183c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <LCD_init+0xda>
    1814:	89 e1       	ldi	r24, 0x19	; 25
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <LCD_init+0xc8>
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f7       	brne	.-38     	; 0x1814 <LCD_init+0xbc>
    183a:	14 c0       	rjmp	.+40     	; 0x1864 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD_init+0x104>
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	6f ef       	ldi	r22, 0xFF	; 255
    1868:	0e 94 30 0a 	call	0x1460	; 0x1460 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    186c:	88 e3       	ldi	r24, 0x38	; 56
    186e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1872:	8c e0       	ldi	r24, 0x0C	; 12
    1874:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_sendCommand>
}
    187e:	2e 96       	adiw	r28, 0x0e	; 14
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	e9 97       	sbiw	r28, 0x39	; 57
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 e8       	ldi	r26, 0x80	; 128
    18b6:	bf e3       	ldi	r27, 0x3F	; 63
    18b8:	8d ab       	std	Y+53, r24	; 0x35
    18ba:	9e ab       	std	Y+54, r25	; 0x36
    18bc:	af ab       	std	Y+55, r26	; 0x37
    18be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	6d a9       	ldd	r22, Y+53	; 0x35
    18c2:	7e a9       	ldd	r23, Y+54	; 0x36
    18c4:	8f a9       	ldd	r24, Y+55	; 0x37
    18c6:	98 ad       	ldd	r25, Y+56	; 0x38
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	53 e4       	ldi	r21, 0x43	; 67
    18d0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	89 ab       	std	Y+49, r24	; 0x31
    18da:	9a ab       	std	Y+50, r25	; 0x32
    18dc:	ab ab       	std	Y+51, r26	; 0x33
    18de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18e0:	69 a9       	ldd	r22, Y+49	; 0x31
    18e2:	7a a9       	ldd	r23, Y+50	; 0x32
    18e4:	8b a9       	ldd	r24, Y+51	; 0x33
    18e6:	9c a9       	ldd	r25, Y+52	; 0x34
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	5f e3       	ldi	r21, 0x3F	; 63
    18f0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	2c f4       	brge	.+10     	; 0x1902 <LCD_sendCommand+0x72>
		__ticks = 1;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	98 ab       	std	Y+48, r25	; 0x30
    18fe:	8f a7       	std	Y+47, r24	; 0x2f
    1900:	3f c0       	rjmp	.+126    	; 0x1980 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1902:	69 a9       	ldd	r22, Y+49	; 0x31
    1904:	7a a9       	ldd	r23, Y+50	; 0x32
    1906:	8b a9       	ldd	r24, Y+51	; 0x33
    1908:	9c a9       	ldd	r25, Y+52	; 0x34
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	3f ef       	ldi	r19, 0xFF	; 255
    190e:	4f e7       	ldi	r20, 0x7F	; 127
    1910:	57 e4       	ldi	r21, 0x47	; 71
    1912:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1916:	18 16       	cp	r1, r24
    1918:	4c f5       	brge	.+82     	; 0x196c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191a:	6d a9       	ldd	r22, Y+53	; 0x35
    191c:	7e a9       	ldd	r23, Y+54	; 0x36
    191e:	8f a9       	ldd	r24, Y+55	; 0x37
    1920:	98 ad       	ldd	r25, Y+56	; 0x38
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e2       	ldi	r20, 0x20	; 32
    1928:	51 e4       	ldi	r21, 0x41	; 65
    192a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	98 ab       	std	Y+48, r25	; 0x30
    1940:	8f a7       	std	Y+47, r24	; 0x2f
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <LCD_sendCommand+0xd2>
    1944:	89 e1       	ldi	r24, 0x19	; 25
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9e a7       	std	Y+46, r25	; 0x2e
    194a:	8d a7       	std	Y+45, r24	; 0x2d
    194c:	8d a5       	ldd	r24, Y+45	; 0x2d
    194e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_sendCommand+0xc0>
    1954:	9e a7       	std	Y+46, r25	; 0x2e
    1956:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	8f a5       	ldd	r24, Y+47	; 0x2f
    195a:	98 a9       	ldd	r25, Y+48	; 0x30
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	98 ab       	std	Y+48, r25	; 0x30
    1960:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1962:	8f a5       	ldd	r24, Y+47	; 0x2f
    1964:	98 a9       	ldd	r25, Y+48	; 0x30
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	69 f7       	brne	.-38     	; 0x1944 <LCD_sendCommand+0xb4>
    196a:	14 c0       	rjmp	.+40     	; 0x1994 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	69 a9       	ldd	r22, Y+49	; 0x31
    196e:	7a a9       	ldd	r23, Y+50	; 0x32
    1970:	8b a9       	ldd	r24, Y+51	; 0x33
    1972:	9c a9       	ldd	r25, Y+52	; 0x34
    1974:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	98 ab       	std	Y+48, r25	; 0x30
    197e:	8f a7       	std	Y+47, r24	; 0x2f
    1980:	8f a5       	ldd	r24, Y+47	; 0x2f
    1982:	98 a9       	ldd	r25, Y+48	; 0x30
    1984:	9c a7       	std	Y+44, r25	; 0x2c
    1986:	8b a7       	std	Y+43, r24	; 0x2b
    1988:	8b a5       	ldd	r24, Y+43	; 0x2b
    198a:	9c a5       	ldd	r25, Y+44	; 0x2c
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_sendCommand+0xfc>
    1990:	9c a7       	std	Y+44, r25	; 0x2c
    1992:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1994:	83 e0       	ldi	r24, 0x03	; 3
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a0 e8       	ldi	r26, 0x80	; 128
    19a4:	bf e3       	ldi	r27, 0x3F	; 63
    19a6:	8f a3       	std	Y+39, r24	; 0x27
    19a8:	98 a7       	std	Y+40, r25	; 0x28
    19aa:	a9 a7       	std	Y+41, r26	; 0x29
    19ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6f a1       	ldd	r22, Y+39	; 0x27
    19b0:	78 a5       	ldd	r23, Y+40	; 0x28
    19b2:	89 a5       	ldd	r24, Y+41	; 0x29
    19b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	53 e4       	ldi	r21, 0x43	; 67
    19be:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8b a3       	std	Y+35, r24	; 0x23
    19c8:	9c a3       	std	Y+36, r25	; 0x24
    19ca:	ad a3       	std	Y+37, r26	; 0x25
    19cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19ce:	6b a1       	ldd	r22, Y+35	; 0x23
    19d0:	7c a1       	ldd	r23, Y+36	; 0x24
    19d2:	8d a1       	ldd	r24, Y+37	; 0x25
    19d4:	9e a1       	ldd	r25, Y+38	; 0x26
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <LCD_sendCommand+0x160>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9a a3       	std	Y+34, r25	; 0x22
    19ec:	89 a3       	std	Y+33, r24	; 0x21
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    19f0:	6b a1       	ldd	r22, Y+35	; 0x23
    19f2:	7c a1       	ldd	r23, Y+36	; 0x24
    19f4:	8d a1       	ldd	r24, Y+37	; 0x25
    19f6:	9e a1       	ldd	r25, Y+38	; 0x26
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6f a1       	ldd	r22, Y+39	; 0x27
    1a0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9a a3       	std	Y+34, r25	; 0x22
    1a2e:	89 a3       	std	Y+33, r24	; 0x21
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <LCD_sendCommand+0x1c0>
    1a32:	89 e1       	ldi	r24, 0x19	; 25
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	98 a3       	std	Y+32, r25	; 0x20
    1a38:	8f 8f       	std	Y+31, r24	; 0x1f
    1a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_sendCommand+0x1ae>
    1a42:	98 a3       	std	Y+32, r25	; 0x20
    1a44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	89 a1       	ldd	r24, Y+33	; 0x21
    1a48:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9a a3       	std	Y+34, r25	; 0x22
    1a4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	89 a1       	ldd	r24, Y+33	; 0x21
    1a52:	9a a1       	ldd	r25, Y+34	; 0x22
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <LCD_sendCommand+0x1a2>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a60:	9e a1       	ldd	r25, Y+38	; 0x26
    1a62:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9a a3       	std	Y+34, r25	; 0x22
    1a6c:	89 a3       	std	Y+33, r24	; 0x21
    1a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a70:	9a a1       	ldd	r25, Y+34	; 0x22
    1a72:	9e 8f       	std	Y+30, r25	; 0x1e
    1a74:	8d 8f       	std	Y+29, r24	; 0x1d
    1a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_sendCommand+0x1ea>
    1a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	69 ad       	ldd	r22, Y+57	; 0x39
    1a86:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePort>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e8       	ldi	r26, 0x80	; 128
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	89 8f       	std	Y+25, r24	; 0x19
    1a94:	9a 8f       	std	Y+26, r25	; 0x1a
    1a96:	ab 8f       	std	Y+27, r26	; 0x1b
    1a98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a e7       	ldi	r20, 0x7A	; 122
    1aa8:	53 e4       	ldi	r21, 0x43	; 67
    1aaa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8d 8b       	std	Y+21, r24	; 0x15
    1ab4:	9e 8b       	std	Y+22, r25	; 0x16
    1ab6:	af 8b       	std	Y+23, r26	; 0x17
    1ab8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aba:	6d 89       	ldd	r22, Y+21	; 0x15
    1abc:	7e 89       	ldd	r23, Y+22	; 0x16
    1abe:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_sendCommand+0x24c>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9c 8b       	std	Y+20, r25	; 0x14
    1ad8:	8b 8b       	std	Y+19, r24	; 0x13
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1adc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ade:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	69 8d       	ldd	r22, Y+25	; 0x19
    1af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9c 8b       	std	Y+20, r25	; 0x14
    1b1a:	8b 8b       	std	Y+19, r24	; 0x13
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_sendCommand+0x2ac>
    1b1e:	89 e1       	ldi	r24, 0x19	; 25
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9a 8b       	std	Y+18, r25	; 0x12
    1b24:	89 8b       	std	Y+17, r24	; 0x11
    1b26:	89 89       	ldd	r24, Y+17	; 0x11
    1b28:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_sendCommand+0x29a>
    1b2e:	9a 8b       	std	Y+18, r25	; 0x12
    1b30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8b 89       	ldd	r24, Y+19	; 0x13
    1b34:	9c 89       	ldd	r25, Y+20	; 0x14
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_sendCommand+0x28e>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9c 8b       	std	Y+20, r25	; 0x14
    1b58:	8b 8b       	std	Y+19, r24	; 0x13
    1b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5e:	98 8b       	std	Y+16, r25	; 0x10
    1b60:	8f 87       	std	Y+15, r24	; 0x0f
    1b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b64:	98 89       	ldd	r25, Y+16	; 0x10
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_sendCommand+0x2d6>
    1b6a:	98 8b       	std	Y+16, r25	; 0x10
    1b6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e8       	ldi	r26, 0x80	; 128
    1b7e:	bf e3       	ldi	r27, 0x3F	; 63
    1b80:	8b 87       	std	Y+11, r24	; 0x0b
    1b82:	9c 87       	std	Y+12, r25	; 0x0c
    1b84:	ad 87       	std	Y+13, r26	; 0x0d
    1b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a e7       	ldi	r20, 0x7A	; 122
    1b96:	53 e4       	ldi	r21, 0x43	; 67
    1b98:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	8f 83       	std	Y+7, r24	; 0x07
    1ba2:	98 87       	std	Y+8, r25	; 0x08
    1ba4:	a9 87       	std	Y+9, r26	; 0x09
    1ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    1baa:	78 85       	ldd	r23, Y+8	; 0x08
    1bac:	89 85       	ldd	r24, Y+9	; 0x09
    1bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <LCD_sendCommand+0x33a>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
    1bc8:	3f c0       	rjmp	.+126    	; 0x1c48 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1bca:	6f 81       	ldd	r22, Y+7	; 0x07
    1bcc:	78 85       	ldd	r23, Y+8	; 0x08
    1bce:	89 85       	ldd	r24, Y+9	; 0x09
    1bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	4c f5       	brge	.+82     	; 0x1c34 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <LCD_sendCommand+0x39a>
    1c0c:	89 e1       	ldi	r24, 0x19	; 25
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9c 83       	std	Y+4, r25	; 0x04
    1c12:	8b 83       	std	Y+3, r24	; 0x03
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_sendCommand+0x388>
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <LCD_sendCommand+0x37c>
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	6f 81       	ldd	r22, Y+7	; 0x07
    1c36:	78 85       	ldd	r23, Y+8	; 0x08
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	9a 81       	ldd	r25, Y+2	; 0x02
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_sendCommand+0x3c4>
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c5c:	e9 96       	adiw	r28, 0x39	; 57
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	e9 97       	sbiw	r28, 0x39	; 57
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e8       	ldi	r26, 0x80	; 128
    1c94:	bf e3       	ldi	r27, 0x3F	; 63
    1c96:	8d ab       	std	Y+53, r24	; 0x35
    1c98:	9e ab       	std	Y+54, r25	; 0x36
    1c9a:	af ab       	std	Y+55, r26	; 0x37
    1c9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a e7       	ldi	r20, 0x7A	; 122
    1cac:	53 e4       	ldi	r21, 0x43	; 67
    1cae:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	89 ab       	std	Y+49, r24	; 0x31
    1cb8:	9a ab       	std	Y+50, r25	; 0x32
    1cba:	ab ab       	std	Y+51, r26	; 0x33
    1cbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	98 ab       	std	Y+48, r25	; 0x30
    1cdc:	8f a7       	std	Y+47, r24	; 0x2f
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1cfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	98 ab       	std	Y+48, r25	; 0x30
    1d1e:	8f a7       	std	Y+47, r24	; 0x2f
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_displayCharacter+0xd2>
    1d22:	89 e1       	ldi	r24, 0x19	; 25
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e a7       	std	Y+46, r25	; 0x2e
    1d28:	8d a7       	std	Y+45, r24	; 0x2d
    1d2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_displayCharacter+0xc0>
    1d32:	9e a7       	std	Y+46, r25	; 0x2e
    1d34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d38:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	98 ab       	std	Y+48, r25	; 0x30
    1d3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d42:	98 a9       	ldd	r25, Y+48	; 0x30
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_displayCharacter+0xb4>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d50:	9c a9       	ldd	r25, Y+52	; 0x34
    1d52:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	98 ab       	std	Y+48, r25	; 0x30
    1d5c:	8f a7       	std	Y+47, r24	; 0x2f
    1d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d60:	98 a9       	ldd	r25, Y+48	; 0x30
    1d62:	9c a7       	std	Y+44, r25	; 0x2c
    1d64:	8b a7       	std	Y+43, r24	; 0x2b
    1d66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_displayCharacter+0xfc>
    1d6e:	9c a7       	std	Y+44, r25	; 0x2c
    1d70:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d72:	83 e0       	ldi	r24, 0x03	; 3
    1d74:	62 e0       	ldi	r22, 0x02	; 2
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a0 e8       	ldi	r26, 0x80	; 128
    1d82:	bf e3       	ldi	r27, 0x3F	; 63
    1d84:	8f a3       	std	Y+39, r24	; 0x27
    1d86:	98 a7       	std	Y+40, r25	; 0x28
    1d88:	a9 a7       	std	Y+41, r26	; 0x29
    1d8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d90:	89 a5       	ldd	r24, Y+41	; 0x29
    1d92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	4a e7       	ldi	r20, 0x7A	; 122
    1d9a:	53 e4       	ldi	r21, 0x43	; 67
    1d9c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8b a3       	std	Y+35, r24	; 0x23
    1da6:	9c a3       	std	Y+36, r25	; 0x24
    1da8:	ad a3       	std	Y+37, r26	; 0x25
    1daa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dac:	6b a1       	ldd	r22, Y+35	; 0x23
    1dae:	7c a1       	ldd	r23, Y+36	; 0x24
    1db0:	8d a1       	ldd	r24, Y+37	; 0x25
    1db2:	9e a1       	ldd	r25, Y+38	; 0x26
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <LCD_displayCharacter+0x160>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9a a3       	std	Y+34, r25	; 0x22
    1dca:	89 a3       	std	Y+33, r24	; 0x21
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1dce:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6f a1       	ldd	r22, Y+39	; 0x27
    1de8:	78 a5       	ldd	r23, Y+40	; 0x28
    1dea:	89 a5       	ldd	r24, Y+41	; 0x29
    1dec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9a a3       	std	Y+34, r25	; 0x22
    1e0c:	89 a3       	std	Y+33, r24	; 0x21
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <LCD_displayCharacter+0x1c0>
    1e10:	89 e1       	ldi	r24, 0x19	; 25
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	98 a3       	std	Y+32, r25	; 0x20
    1e16:	8f 8f       	std	Y+31, r24	; 0x1f
    1e18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e1a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_displayCharacter+0x1ae>
    1e20:	98 a3       	std	Y+32, r25	; 0x20
    1e22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	89 a1       	ldd	r24, Y+33	; 0x21
    1e26:	9a a1       	ldd	r25, Y+34	; 0x22
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9a a3       	std	Y+34, r25	; 0x22
    1e2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e30:	9a a1       	ldd	r25, Y+34	; 0x22
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <LCD_displayCharacter+0x1a2>
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e40:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9a a3       	std	Y+34, r25	; 0x22
    1e4a:	89 a3       	std	Y+33, r24	; 0x21
    1e4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e50:	9e 8f       	std	Y+30, r25	; 0x1e
    1e52:	8d 8f       	std	Y+29, r24	; 0x1d
    1e54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_displayCharacter+0x1ea>
    1e5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	69 ad       	ldd	r22, Y+57	; 0x39
    1e64:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_writePort>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e8       	ldi	r26, 0x80	; 128
    1e6e:	bf e3       	ldi	r27, 0x3F	; 63
    1e70:	89 8f       	std	Y+25, r24	; 0x19
    1e72:	9a 8f       	std	Y+26, r25	; 0x1a
    1e74:	ab 8f       	std	Y+27, r26	; 0x1b
    1e76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	69 8d       	ldd	r22, Y+25	; 0x19
    1e7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a e7       	ldi	r20, 0x7A	; 122
    1e86:	53 e4       	ldi	r21, 0x43	; 67
    1e88:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8d 8b       	std	Y+21, r24	; 0x15
    1e92:	9e 8b       	std	Y+22, r25	; 0x16
    1e94:	af 8b       	std	Y+23, r26	; 0x17
    1e96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e98:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9c 8b       	std	Y+20, r25	; 0x14
    1eb6:	8b 8b       	std	Y+19, r24	; 0x13
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1eba:	6d 89       	ldd	r22, Y+21	; 0x15
    1ebc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ebe:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9c 8b       	std	Y+20, r25	; 0x14
    1ef8:	8b 8b       	std	Y+19, r24	; 0x13
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <LCD_displayCharacter+0x2ac>
    1efc:	89 e1       	ldi	r24, 0x19	; 25
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9a 8b       	std	Y+18, r25	; 0x12
    1f02:	89 8b       	std	Y+17, r24	; 0x11
    1f04:	89 89       	ldd	r24, Y+17	; 0x11
    1f06:	9a 89       	ldd	r25, Y+18	; 0x12
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_displayCharacter+0x29a>
    1f0c:	9a 8b       	std	Y+18, r25	; 0x12
    1f0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8b 89       	ldd	r24, Y+19	; 0x13
    1f12:	9c 89       	ldd	r25, Y+20	; 0x14
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9c 8b       	std	Y+20, r25	; 0x14
    1f18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <LCD_displayCharacter+0x28e>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6d 89       	ldd	r22, Y+21	; 0x15
    1f26:	7e 89       	ldd	r23, Y+22	; 0x16
    1f28:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9c 8b       	std	Y+20, r25	; 0x14
    1f36:	8b 8b       	std	Y+19, r24	; 0x13
    1f38:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3c:	98 8b       	std	Y+16, r25	; 0x10
    1f3e:	8f 87       	std	Y+15, r24	; 0x0f
    1f40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f42:	98 89       	ldd	r25, Y+16	; 0x10
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_displayCharacter+0x2d6>
    1f48:	98 8b       	std	Y+16, r25	; 0x10
    1f4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	62 e0       	ldi	r22, 0x02	; 2
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a0 e8       	ldi	r26, 0x80	; 128
    1f5c:	bf e3       	ldi	r27, 0x3F	; 63
    1f5e:	8b 87       	std	Y+11, r24	; 0x0b
    1f60:	9c 87       	std	Y+12, r25	; 0x0c
    1f62:	ad 87       	std	Y+13, r26	; 0x0d
    1f64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4a e7       	ldi	r20, 0x7A	; 122
    1f74:	53 e4       	ldi	r21, 0x43	; 67
    1f76:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8f 83       	std	Y+7, r24	; 0x07
    1f80:	98 87       	std	Y+8, r25	; 0x08
    1f82:	a9 87       	std	Y+9, r26	; 0x09
    1f84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f86:	6f 81       	ldd	r22, Y+7	; 0x07
    1f88:	78 85       	ldd	r23, Y+8	; 0x08
    1f8a:	89 85       	ldd	r24, Y+9	; 0x09
    1f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
    1fa6:	3f c0       	rjmp	.+126    	; 0x2026 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	57 e4       	ldi	r21, 0x47	; 71
    1fb8:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	4c f5       	brge	.+82     	; 0x2012 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e2       	ldi	r20, 0x20	; 32
    1fce:	51 e4       	ldi	r21, 0x41	; 65
    1fd0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <LCD_displayCharacter+0x39a>
    1fea:	89 e1       	ldi	r24, 0x19	; 25
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_displayCharacter+0x388>
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	69 f7       	brne	.-38     	; 0x1fea <LCD_displayCharacter+0x37c>
    2010:	14 c0       	rjmp	.+40     	; 0x203a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	8d 83       	std	Y+5, r24	; 0x05
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	9e 81       	ldd	r25, Y+6	; 0x06
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_displayCharacter+0x3c4>
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    203a:	e9 96       	adiw	r28, 0x39	; 57
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <LCD_displayString+0x6>
    2052:	0f 92       	push	r0
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	9b 83       	std	Y+3, r25	; 0x03
    205a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    205c:	19 82       	std	Y+1, r1	; 0x01
    205e:	0e c0       	rjmp	.+28     	; 0x207c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	9b 81       	ldd	r25, Y+3	; 0x03
    206a:	fc 01       	movw	r30, r24
    206c:	e2 0f       	add	r30, r18
    206e:	f3 1f       	adc	r31, r19
    2070:	80 81       	ld	r24, Z
    2072:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_displayCharacter>
		i++;
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	fc 01       	movw	r30, r24
    2088:	e2 0f       	add	r30, r18
    208a:	f3 1f       	adc	r31, r19
    208c:	80 81       	ld	r24, Z
    208e:	88 23       	and	r24, r24
    2090:	39 f7       	brne	.-50     	; 0x2060 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <LCD_moveCursor+0x6>
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <LCD_moveCursor+0x8>
    20a6:	0f 92       	push	r0
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    20ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3d 83       	std	Y+5, r19	; 0x05
    20b8:	2c 83       	std	Y+4, r18	; 0x04
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	91 05       	cpc	r25, r1
    20c2:	c1 f0       	breq	.+48     	; 0x20f4 <LCD_moveCursor+0x56>
    20c4:	2c 81       	ldd	r18, Y+4	; 0x04
    20c6:	3d 81       	ldd	r19, Y+5	; 0x05
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <LCD_moveCursor+0x3a>
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	9d 81       	ldd	r25, Y+5	; 0x05
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	61 f0       	breq	.+24     	; 0x20ee <LCD_moveCursor+0x50>
    20d6:	19 c0       	rjmp	.+50     	; 0x210a <LCD_moveCursor+0x6c>
    20d8:	2c 81       	ldd	r18, Y+4	; 0x04
    20da:	3d 81       	ldd	r19, Y+5	; 0x05
    20dc:	22 30       	cpi	r18, 0x02	; 2
    20de:	31 05       	cpc	r19, r1
    20e0:	69 f0       	breq	.+26     	; 0x20fc <LCD_moveCursor+0x5e>
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	83 30       	cpi	r24, 0x03	; 3
    20e8:	91 05       	cpc	r25, r1
    20ea:	61 f0       	breq	.+24     	; 0x2104 <LCD_moveCursor+0x66>
    20ec:	0e c0       	rjmp	.+28     	; 0x210a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	80 5c       	subi	r24, 0xC0	; 192
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	80 5f       	subi	r24, 0xF0	; 240
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	03 c0       	rjmp	.+6      	; 0x210a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	80 5b       	subi	r24, 0xB0	; 176
    2108:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	80 68       	ori	r24, 0x80	; 128
    210e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_sendCommand>
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <LCD_displayStringRowColumn+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <LCD_displayStringRowColumn+0x8>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	6a 83       	std	Y+2, r22	; 0x02
    2132:	5c 83       	std	Y+4, r21	; 0x04
    2134:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	6a 81       	ldd	r22, Y+2	; 0x02
    213a:	0e 94 4f 10 	call	0x209e	; 0x209e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	0e 94 26 10 	call	0x204c	; 0x204c <LCD_displayString>
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	62 97       	sbiw	r28, 0x12	; 18
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	9a 8b       	std	Y+18, r25	; 0x12
    216a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    216c:	89 89       	ldd	r24, Y+17	; 0x11
    216e:	9a 89       	ldd	r25, Y+18	; 0x12
    2170:	9e 01       	movw	r18, r28
    2172:	2f 5f       	subi	r18, 0xFF	; 255
    2174:	3f 4f       	sbci	r19, 0xFF	; 255
    2176:	b9 01       	movw	r22, r18
    2178:	4a e0       	ldi	r20, 0x0A	; 10
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	0e 94 94 12 	call	0x2528	; 0x2528 <itoa>
   LCD_displayString(buff); /* Display the string */
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	0e 94 26 10 	call	0x204c	; 0x204c <LCD_displayString>
}
    2188:	62 96       	adiw	r28, 0x12	; 18
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_floatToString>:

/*
 * Description :
 * Converts a floating-point/double number to a string.
 */
void LCD_floatToString(float32 data) {
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	64 97       	sbiw	r28, 0x14	; 20
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	69 8b       	std	Y+17, r22	; 0x11
    21b4:	7a 8b       	std	Y+18, r23	; 0x12
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	dtostrf(data, 6, 1, buff); /* Use dtostrf C function to convert the data to its corresponding ASCII value, 10 for float decimal */
    21ba:	89 89       	ldd	r24, Y+17	; 0x11
    21bc:	9a 89       	ldd	r25, Y+18	; 0x12
    21be:	ab 89       	ldd	r26, Y+19	; 0x13
    21c0:	bc 89       	ldd	r27, Y+20	; 0x14
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	46 e0       	ldi	r20, 0x06	; 6
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	21 e0       	ldi	r18, 0x01	; 1
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	fe 01       	movw	r30, r28
    21d0:	31 96       	adiw	r30, 0x01	; 1
    21d2:	8f 01       	movw	r16, r30
    21d4:	0e 94 73 12 	call	0x24e6	; 0x24e6 <dtostrf>
	LCD_displayString(buff); /* Display the string */
    21d8:	ce 01       	movw	r24, r28
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	0e 94 26 10 	call	0x204c	; 0x204c <LCD_displayString>
}
    21e0:	64 96       	adiw	r28, 0x14	; 20
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_sendCommand>
}
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <DcMotor_Init>:

/*
 * Description :
 * Function responsible for initialize the DC_Motor driver.
 */
void DcMotor_Init(void) {
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_FIRST_PORT_ID , DC_MOTOR_FIRST_PIN_ID, PIN_OUTPUT);
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 bc 07 	call	0xf78	; 0xf78 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, PIN_OUTPUT);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	61 e0       	ldi	r22, 0x01	; 1
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 bc 07 	call	0xf78	; 0xf78 <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_FIRST_PORT_ID , DC_MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <DcMotor_Rotate>:

/*
 * Description :
 * Function responsible for initialize the DC_Motor_Rotate driver.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <DcMotor_Rotate+0x6>
    2246:	00 d0       	rcall	.+0      	; 0x2248 <DcMotor_Rotate+0x8>
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	3c 83       	std	Y+4, r19	; 0x04
    2258:	2b 83       	std	Y+3, r18	; 0x03
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	91 05       	cpc	r25, r1
    2262:	a1 f0       	breq	.+40     	; 0x228c <DcMotor_Rotate+0x4c>
    2264:	2b 81       	ldd	r18, Y+3	; 0x03
    2266:	3c 81       	ldd	r19, Y+4	; 0x04
    2268:	22 30       	cpi	r18, 0x02	; 2
    226a:	31 05       	cpc	r19, r1
    226c:	d1 f0       	breq	.+52     	; 0x22a2 <DcMotor_Rotate+0x62>
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	9c 81       	ldd	r25, Y+4	; 0x04
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	01 f5       	brne	.+64     	; 0x22b6 <DcMotor_Rotate+0x76>
	case STOP:
		GPIO_writePin(DC_MOTOR_FIRST_PORT_ID, DC_MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
    228a:	15 c0       	rjmp	.+42     	; 0x22b6 <DcMotor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_FIRST_PORT_ID , DC_MOTOR_FIRST_PIN_ID, LOGIC_HIGH);
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	61 e0       	ldi	r22, 0x01	; 1
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
    22a0:	0a c0       	rjmp	.+20     	; 0x22b6 <DcMotor_Rotate+0x76>
		break;
	case A_CW:
		GPIO_writePin(DC_MOTOR_FIRST_PORT_ID , DC_MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_SECOND_PORT_ID, DC_MOTOR_SECOND_PIN_ID, LOGIC_HIGH);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	61 e0       	ldi	r22, 0x01	; 1
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_writePin>
		break;
	}

	PWM_Timer0_Start(speed);
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	0e 94 8c 07 	call	0xf18	; 0xf18 <PWM_Timer0_Start>

}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <main>:
#include "MCAL/GPIO/gpio.h"
#include "HAL/LCD/lcd.h"
#include "MCAL/ADC/adc.h"
#include "HAL/DC_MOTOR/motor.h"

int main(void) {
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <main+0x6>
    22d0:	0f 92       	push	r0
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	uint8 temp = 0;
    22d6:	19 82       	std	Y+1, r1	; 0x01
	ADC_ConfigType ADC_ConfigType = { Internal_2_56V, DF_8 };
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	8a 83       	std	Y+2, r24	; 0x02
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	8b 83       	std	Y+3, r24	; 0x03
	/*Initialization for the modules*/
	ADC_init(&ADC_ConfigType);
    22e0:	ce 01       	movw	r24, r28
    22e2:	02 96       	adiw	r24, 0x02	; 2
    22e4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ADC_init>
	LCD_init();
    22e8:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_init>
	DcMotor_Init();
    22ec:	0e 94 05 11 	call	0x220a	; 0x220a <DcMotor_Init>
	LCD_displayStringRowColumn(0, 3, "FAN is OFF ");
    22f0:	20 e6       	ldi	r18, 0x60	; 96
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	a9 01       	movw	r20, r18
    22fa:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 3, "Temp =    C");
    22fe:	2c e6       	ldi	r18, 0x6C	; 108
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	63 e0       	ldi	r22, 0x03	; 3
    2306:	a9 01       	movw	r20, r18
    2308:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>

	while (1) {
		/*get the temperature value */
		temp = LM35_getTemperature();
    230c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <LM35_getTemperature>
    2310:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(1, 10);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	6a e0       	ldi	r22, 0x0A	; 10
    2316:	0e 94 4f 10 	call	0x209e	; 0x209e <LCD_moveCursor>
		if (temp >= 100) {
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	84 36       	cpi	r24, 0x64	; 100
    231e:	30 f0       	brcs	.+12     	; 0x232c <main+0x62>
			LCD_integerToString(temp);
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_integerToString>
    232a:	08 c0       	rjmp	.+16     	; 0x233c <main+0x72>
		} else {
			LCD_integerToString(temp);
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_integerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
    2336:	80 e2       	ldi	r24, 0x20	; 32
    2338:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_displayCharacter>
		}

		/*Display ON/OFF */
		LCD_moveCursor(0, 10);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	6a e0       	ldi	r22, 0x0A	; 10
    2340:	0e 94 4f 10 	call	0x209e	; 0x209e <LCD_moveCursor>
		/* If the temperature is less than 30C turn off the fan*/
		if (temp < 30) {
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8e 31       	cpi	r24, 0x1E	; 30
    2348:	60 f4       	brcc	.+24     	; 0x2362 <main+0x98>
			LCD_displayStringRowColumn(0, 10, "OFF");
    234a:	28 e7       	ldi	r18, 0x78	; 120
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	6a e0       	ldi	r22, 0x0A	; 10
    2352:	a9 01       	movw	r20, r18
    2354:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
			DcMotor_Rotate(STOP, 0);
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	0e 94 20 11 	call	0x2240	; 0x2240 <DcMotor_Rotate>
    2360:	d5 cf       	rjmp	.-86     	; 0x230c <main+0x42>
		}
		/* If the temperature is greater than or equal 30C turn on the fan with 25% of its
		 * maximum speed.
		 */
		else if (temp >= 30 && temp < 60) {
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	8e 31       	cpi	r24, 0x1E	; 30
    2366:	78 f0       	brcs	.+30     	; 0x2386 <main+0xbc>
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	8c 33       	cpi	r24, 0x3C	; 60
    236c:	60 f4       	brcc	.+24     	; 0x2386 <main+0xbc>
			LCD_displayStringRowColumn(0, 10, "ON ");
    236e:	2c e7       	ldi	r18, 0x7C	; 124
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	6a e0       	ldi	r22, 0x0A	; 10
    2376:	a9 01       	movw	r20, r18
    2378:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
			DcMotor_Rotate(CW, 25);
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	69 e1       	ldi	r22, 0x19	; 25
    2380:	0e 94 20 11 	call	0x2240	; 0x2240 <DcMotor_Rotate>
    2384:	c3 cf       	rjmp	.-122    	; 0x230c <main+0x42>
		}
		/* If the temperature is greater than or equal 30C turn on the fan with 25% of its
		 * maximum speed.
		 */
		else if (temp >= 30 && temp < 60) {
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	8e 31       	cpi	r24, 0x1E	; 30
    238a:	78 f0       	brcs	.+30     	; 0x23aa <main+0xe0>
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	8c 33       	cpi	r24, 0x3C	; 60
    2390:	60 f4       	brcc	.+24     	; 0x23aa <main+0xe0>
			LCD_displayStringRowColumn(0, 10, "ON ");
    2392:	2c e7       	ldi	r18, 0x7C	; 124
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	6a e0       	ldi	r22, 0x0A	; 10
    239a:	a9 01       	movw	r20, r18
    239c:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
			DcMotor_Rotate(CW, 25);
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	69 e1       	ldi	r22, 0x19	; 25
    23a4:	0e 94 20 11 	call	0x2240	; 0x2240 <DcMotor_Rotate>
    23a8:	b1 cf       	rjmp	.-158    	; 0x230c <main+0x42>
		}
		/* If the temperature is greater than or equal 60C turn on the fan with 50% of its
		 * maximum speed.
		 */
		else if (temp >= 60 && temp < 90) {
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	8c 33       	cpi	r24, 0x3C	; 60
    23ae:	78 f0       	brcs	.+30     	; 0x23ce <main+0x104>
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	8a 35       	cpi	r24, 0x5A	; 90
    23b4:	60 f4       	brcc	.+24     	; 0x23ce <main+0x104>
			LCD_displayStringRowColumn(0, 10, "ON ");
    23b6:	2c e7       	ldi	r18, 0x7C	; 124
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	6a e0       	ldi	r22, 0x0A	; 10
    23be:	a9 01       	movw	r20, r18
    23c0:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
			DcMotor_Rotate(CW, 50);
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	62 e3       	ldi	r22, 0x32	; 50
    23c8:	0e 94 20 11 	call	0x2240	; 0x2240 <DcMotor_Rotate>
    23cc:	9f cf       	rjmp	.-194    	; 0x230c <main+0x42>
		}
		/* If the temperature is greater than or equal 90C turn on the fan with 75% of its
		 * maximum speed.
		 */
		else if (temp >= 90 && temp < 120) {
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	8a 35       	cpi	r24, 0x5A	; 90
    23d2:	78 f0       	brcs	.+30     	; 0x23f2 <main+0x128>
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	88 37       	cpi	r24, 0x78	; 120
    23d8:	60 f4       	brcc	.+24     	; 0x23f2 <main+0x128>
			LCD_displayStringRowColumn(0, 10, "ON ");
    23da:	2c e7       	ldi	r18, 0x7C	; 124
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	6a e0       	ldi	r22, 0x0A	; 10
    23e2:	a9 01       	movw	r20, r18
    23e4:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
			DcMotor_Rotate(CW, 75);
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	6b e4       	ldi	r22, 0x4B	; 75
    23ec:	0e 94 20 11 	call	0x2240	; 0x2240 <DcMotor_Rotate>
    23f0:	8d cf       	rjmp	.-230    	; 0x230c <main+0x42>
		}
		/* If the temperature is greater than or equal 120C turn on the fan with 100% of its
		 * maximum speed.
		 */
		else if (temp >= 120) {
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	88 37       	cpi	r24, 0x78	; 120
    23f6:	08 f4       	brcc	.+2      	; 0x23fa <main+0x130>
    23f8:	89 cf       	rjmp	.-238    	; 0x230c <main+0x42>
			LCD_displayStringRowColumn(0, 10, "ON ");
    23fa:	2c e7       	ldi	r18, 0x7C	; 124
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	6a e0       	ldi	r22, 0x0A	; 10
    2402:	a9 01       	movw	r20, r18
    2404:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
			DcMotor_Rotate(CW, 100);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	64 e6       	ldi	r22, 0x64	; 100
    240c:	0e 94 20 11 	call	0x2240	; 0x2240 <DcMotor_Rotate>
    2410:	7d cf       	rjmp	.-262    	; 0x230c <main+0x42>

00002412 <__mulsi3>:
    2412:	62 9f       	mul	r22, r18
    2414:	d0 01       	movw	r26, r0
    2416:	73 9f       	mul	r23, r19
    2418:	f0 01       	movw	r30, r0
    241a:	82 9f       	mul	r24, r18
    241c:	e0 0d       	add	r30, r0
    241e:	f1 1d       	adc	r31, r1
    2420:	64 9f       	mul	r22, r20
    2422:	e0 0d       	add	r30, r0
    2424:	f1 1d       	adc	r31, r1
    2426:	92 9f       	mul	r25, r18
    2428:	f0 0d       	add	r31, r0
    242a:	83 9f       	mul	r24, r19
    242c:	f0 0d       	add	r31, r0
    242e:	74 9f       	mul	r23, r20
    2430:	f0 0d       	add	r31, r0
    2432:	65 9f       	mul	r22, r21
    2434:	f0 0d       	add	r31, r0
    2436:	99 27       	eor	r25, r25
    2438:	72 9f       	mul	r23, r18
    243a:	b0 0d       	add	r27, r0
    243c:	e1 1d       	adc	r30, r1
    243e:	f9 1f       	adc	r31, r25
    2440:	63 9f       	mul	r22, r19
    2442:	b0 0d       	add	r27, r0
    2444:	e1 1d       	adc	r30, r1
    2446:	f9 1f       	adc	r31, r25
    2448:	bd 01       	movw	r22, r26
    244a:	cf 01       	movw	r24, r30
    244c:	11 24       	eor	r1, r1
    244e:	08 95       	ret

00002450 <__udivmodhi4>:
    2450:	aa 1b       	sub	r26, r26
    2452:	bb 1b       	sub	r27, r27
    2454:	51 e1       	ldi	r21, 0x11	; 17
    2456:	07 c0       	rjmp	.+14     	; 0x2466 <__udivmodhi4_ep>

00002458 <__udivmodhi4_loop>:
    2458:	aa 1f       	adc	r26, r26
    245a:	bb 1f       	adc	r27, r27
    245c:	a6 17       	cp	r26, r22
    245e:	b7 07       	cpc	r27, r23
    2460:	10 f0       	brcs	.+4      	; 0x2466 <__udivmodhi4_ep>
    2462:	a6 1b       	sub	r26, r22
    2464:	b7 0b       	sbc	r27, r23

00002466 <__udivmodhi4_ep>:
    2466:	88 1f       	adc	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	5a 95       	dec	r21
    246c:	a9 f7       	brne	.-22     	; 0x2458 <__udivmodhi4_loop>
    246e:	80 95       	com	r24
    2470:	90 95       	com	r25
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	08 95       	ret

00002478 <__prologue_saves__>:
    2478:	2f 92       	push	r2
    247a:	3f 92       	push	r3
    247c:	4f 92       	push	r4
    247e:	5f 92       	push	r5
    2480:	6f 92       	push	r6
    2482:	7f 92       	push	r7
    2484:	8f 92       	push	r8
    2486:	9f 92       	push	r9
    2488:	af 92       	push	r10
    248a:	bf 92       	push	r11
    248c:	cf 92       	push	r12
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	ca 1b       	sub	r28, r26
    24a2:	db 0b       	sbc	r29, r27
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	09 94       	ijmp

000024b0 <__epilogue_restores__>:
    24b0:	2a 88       	ldd	r2, Y+18	; 0x12
    24b2:	39 88       	ldd	r3, Y+17	; 0x11
    24b4:	48 88       	ldd	r4, Y+16	; 0x10
    24b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    24b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    24ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    24bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    24be:	9b 84       	ldd	r9, Y+11	; 0x0b
    24c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    24c2:	b9 84       	ldd	r11, Y+9	; 0x09
    24c4:	c8 84       	ldd	r12, Y+8	; 0x08
    24c6:	df 80       	ldd	r13, Y+7	; 0x07
    24c8:	ee 80       	ldd	r14, Y+6	; 0x06
    24ca:	fd 80       	ldd	r15, Y+5	; 0x05
    24cc:	0c 81       	ldd	r16, Y+4	; 0x04
    24ce:	1b 81       	ldd	r17, Y+3	; 0x03
    24d0:	aa 81       	ldd	r26, Y+2	; 0x02
    24d2:	b9 81       	ldd	r27, Y+1	; 0x01
    24d4:	ce 0f       	add	r28, r30
    24d6:	d1 1d       	adc	r29, r1
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	ed 01       	movw	r28, r26
    24e4:	08 95       	ret

000024e6 <dtostrf>:
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	f2 2f       	mov	r31, r18
    24f0:	f0 2e       	mov	r15, r16
    24f2:	47 fd       	sbrc	r20, 7
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <dtostrf+0x14>
    24f6:	e4 e0       	ldi	r30, 0x04	; 4
    24f8:	01 c0       	rjmp	.+2      	; 0x24fc <dtostrf+0x16>
    24fa:	e4 e1       	ldi	r30, 0x14	; 20
    24fc:	24 2f       	mov	r18, r20
    24fe:	33 27       	eor	r19, r19
    2500:	27 fd       	sbrc	r18, 7
    2502:	30 95       	com	r19
    2504:	37 ff       	sbrs	r19, 7
    2506:	03 c0       	rjmp	.+6      	; 0x250e <dtostrf+0x28>
    2508:	30 95       	com	r19
    250a:	21 95       	neg	r18
    250c:	3f 4f       	sbci	r19, 0xFF	; 255
    250e:	4f 2d       	mov	r20, r15
    2510:	51 2f       	mov	r21, r17
    2512:	0f 2f       	mov	r16, r31
    2514:	ee 2e       	mov	r14, r30
    2516:	0e 94 b5 12 	call	0x256a	; 0x256a <dtoa_prf>
    251a:	8f 2d       	mov	r24, r15
    251c:	91 2f       	mov	r25, r17
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	ff 90       	pop	r15
    2524:	ef 90       	pop	r14
    2526:	08 95       	ret

00002528 <itoa>:
    2528:	fb 01       	movw	r30, r22
    252a:	9f 01       	movw	r18, r30
    252c:	e8 94       	clt
    252e:	42 30       	cpi	r20, 0x02	; 2
    2530:	c4 f0       	brlt	.+48     	; 0x2562 <itoa+0x3a>
    2532:	45 32       	cpi	r20, 0x25	; 37
    2534:	b4 f4       	brge	.+44     	; 0x2562 <itoa+0x3a>
    2536:	4a 30       	cpi	r20, 0x0A	; 10
    2538:	29 f4       	brne	.+10     	; 0x2544 <itoa+0x1c>
    253a:	97 fb       	bst	r25, 7
    253c:	1e f4       	brtc	.+6      	; 0x2544 <itoa+0x1c>
    253e:	90 95       	com	r25
    2540:	81 95       	neg	r24
    2542:	9f 4f       	sbci	r25, 0xFF	; 255
    2544:	64 2f       	mov	r22, r20
    2546:	77 27       	eor	r23, r23
    2548:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodhi4>
    254c:	80 5d       	subi	r24, 0xD0	; 208
    254e:	8a 33       	cpi	r24, 0x3A	; 58
    2550:	0c f0       	brlt	.+2      	; 0x2554 <itoa+0x2c>
    2552:	89 5d       	subi	r24, 0xD9	; 217
    2554:	81 93       	st	Z+, r24
    2556:	cb 01       	movw	r24, r22
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	a1 f7       	brne	.-24     	; 0x2544 <itoa+0x1c>
    255c:	16 f4       	brtc	.+4      	; 0x2562 <itoa+0x3a>
    255e:	5d e2       	ldi	r21, 0x2D	; 45
    2560:	51 93       	st	Z+, r21
    2562:	10 82       	st	Z, r1
    2564:	c9 01       	movw	r24, r18
    2566:	0c 94 ef 14 	jmp	0x29de	; 0x29de <strrev>

0000256a <dtoa_prf>:
    256a:	a9 e0       	ldi	r26, 0x09	; 9
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	eb eb       	ldi	r30, 0xBB	; 187
    2570:	f2 e1       	ldi	r31, 0x12	; 18
    2572:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__prologue_saves__+0x8>
    2576:	6a 01       	movw	r12, r20
    2578:	12 2f       	mov	r17, r18
    257a:	a0 2e       	mov	r10, r16
    257c:	be 2c       	mov	r11, r14
    257e:	2b e3       	ldi	r18, 0x3B	; 59
    2580:	20 17       	cp	r18, r16
    2582:	18 f4       	brcc	.+6      	; 0x258a <dtoa_prf+0x20>
    2584:	2c e3       	ldi	r18, 0x3C	; 60
    2586:	92 2e       	mov	r9, r18
    2588:	02 c0       	rjmp	.+4      	; 0x258e <dtoa_prf+0x24>
    258a:	90 2e       	mov	r9, r16
    258c:	93 94       	inc	r9
    258e:	ae 01       	movw	r20, r28
    2590:	4f 5f       	subi	r20, 0xFF	; 255
    2592:	5f 4f       	sbci	r21, 0xFF	; 255
    2594:	27 e0       	ldi	r18, 0x07	; 7
    2596:	09 2d       	mov	r16, r9
    2598:	0e 94 17 14 	call	0x282e	; 0x282e <__ftoa_engine>
    259c:	bc 01       	movw	r22, r24
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	e8 2e       	mov	r14, r24
    25a2:	ff 24       	eor	r15, r15
    25a4:	c7 01       	movw	r24, r14
    25a6:	89 70       	andi	r24, 0x09	; 9
    25a8:	90 70       	andi	r25, 0x00	; 0
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	11 f4       	brne	.+4      	; 0x25b2 <dtoa_prf+0x48>
    25ae:	ad e2       	ldi	r26, 0x2D	; 45
    25b0:	09 c0       	rjmp	.+18     	; 0x25c4 <dtoa_prf+0x5a>
    25b2:	b1 fe       	sbrs	r11, 1
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <dtoa_prf+0x50>
    25b6:	ab e2       	ldi	r26, 0x2B	; 43
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <dtoa_prf+0x5a>
    25ba:	b0 fc       	sbrc	r11, 0
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <dtoa_prf+0x58>
    25be:	a0 e0       	ldi	r26, 0x00	; 0
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <dtoa_prf+0x5a>
    25c2:	a0 e2       	ldi	r26, 0x20	; 32
    25c4:	e3 fe       	sbrs	r14, 3
    25c6:	3b c0       	rjmp	.+118    	; 0x263e <dtoa_prf+0xd4>
    25c8:	aa 23       	and	r26, r26
    25ca:	11 f4       	brne	.+4      	; 0x25d0 <dtoa_prf+0x66>
    25cc:	23 e0       	ldi	r18, 0x03	; 3
    25ce:	01 c0       	rjmp	.+2      	; 0x25d2 <dtoa_prf+0x68>
    25d0:	24 e0       	ldi	r18, 0x04	; 4
    25d2:	21 17       	cp	r18, r17
    25d4:	10 f0       	brcs	.+4      	; 0x25da <dtoa_prf+0x70>
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <dtoa_prf+0x74>
    25da:	12 1b       	sub	r17, r18
    25dc:	21 2f       	mov	r18, r17
    25de:	eb 2c       	mov	r14, r11
    25e0:	b4 fe       	sbrs	r11, 4
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <dtoa_prf+0x7e>
    25e4:	32 2f       	mov	r19, r18
    25e6:	0a c0       	rjmp	.+20     	; 0x25fc <dtoa_prf+0x92>
    25e8:	f6 01       	movw	r30, r12
    25ea:	32 2f       	mov	r19, r18
    25ec:	80 e2       	ldi	r24, 0x20	; 32
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <dtoa_prf+0x8a>
    25f0:	81 93       	st	Z+, r24
    25f2:	31 50       	subi	r19, 0x01	; 1
    25f4:	33 23       	and	r19, r19
    25f6:	e1 f7       	brne	.-8      	; 0x25f0 <dtoa_prf+0x86>
    25f8:	c2 0e       	add	r12, r18
    25fa:	d1 1c       	adc	r13, r1
    25fc:	aa 23       	and	r26, r26
    25fe:	19 f0       	breq	.+6      	; 0x2606 <dtoa_prf+0x9c>
    2600:	f6 01       	movw	r30, r12
    2602:	a1 93       	st	Z+, r26
    2604:	6f 01       	movw	r12, r30
    2606:	f6 01       	movw	r30, r12
    2608:	31 96       	adiw	r30, 0x01	; 1
    260a:	e2 fe       	sbrs	r14, 2
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <dtoa_prf+0xae>
    260e:	9e e4       	ldi	r25, 0x4E	; 78
    2610:	d6 01       	movw	r26, r12
    2612:	9c 93       	st	X, r25
    2614:	81 e4       	ldi	r24, 0x41	; 65
    2616:	04 c0       	rjmp	.+8      	; 0x2620 <dtoa_prf+0xb6>
    2618:	9e e6       	ldi	r25, 0x6E	; 110
    261a:	d6 01       	movw	r26, r12
    261c:	9c 93       	st	X, r25
    261e:	81 e6       	ldi	r24, 0x61	; 97
    2620:	11 96       	adiw	r26, 0x01	; 1
    2622:	8c 93       	st	X, r24
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	32 96       	adiw	r30, 0x02	; 2
    2628:	df 01       	movw	r26, r30
    262a:	83 2f       	mov	r24, r19
    262c:	90 e2       	ldi	r25, 0x20	; 32
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <dtoa_prf+0xca>
    2630:	9d 93       	st	X+, r25
    2632:	81 50       	subi	r24, 0x01	; 1
    2634:	88 23       	and	r24, r24
    2636:	e1 f7       	brne	.-8      	; 0x2630 <dtoa_prf+0xc6>
    2638:	e3 0f       	add	r30, r19
    263a:	f1 1d       	adc	r31, r1
    263c:	40 c0       	rjmp	.+128    	; 0x26be <dtoa_prf+0x154>
    263e:	e2 fe       	sbrs	r14, 2
    2640:	42 c0       	rjmp	.+132    	; 0x26c6 <dtoa_prf+0x15c>
    2642:	aa 23       	and	r26, r26
    2644:	11 f4       	brne	.+4      	; 0x264a <dtoa_prf+0xe0>
    2646:	23 e0       	ldi	r18, 0x03	; 3
    2648:	01 c0       	rjmp	.+2      	; 0x264c <dtoa_prf+0xe2>
    264a:	24 e0       	ldi	r18, 0x04	; 4
    264c:	21 17       	cp	r18, r17
    264e:	10 f0       	brcs	.+4      	; 0x2654 <dtoa_prf+0xea>
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <dtoa_prf+0xee>
    2654:	12 1b       	sub	r17, r18
    2656:	21 2f       	mov	r18, r17
    2658:	eb 2c       	mov	r14, r11
    265a:	b4 fe       	sbrs	r11, 4
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <dtoa_prf+0xf8>
    265e:	92 2f       	mov	r25, r18
    2660:	0a c0       	rjmp	.+20     	; 0x2676 <dtoa_prf+0x10c>
    2662:	f6 01       	movw	r30, r12
    2664:	92 2f       	mov	r25, r18
    2666:	80 e2       	ldi	r24, 0x20	; 32
    2668:	02 c0       	rjmp	.+4      	; 0x266e <dtoa_prf+0x104>
    266a:	81 93       	st	Z+, r24
    266c:	91 50       	subi	r25, 0x01	; 1
    266e:	99 23       	and	r25, r25
    2670:	e1 f7       	brne	.-8      	; 0x266a <dtoa_prf+0x100>
    2672:	c2 0e       	add	r12, r18
    2674:	d1 1c       	adc	r13, r1
    2676:	aa 23       	and	r26, r26
    2678:	19 f0       	breq	.+6      	; 0x2680 <dtoa_prf+0x116>
    267a:	f6 01       	movw	r30, r12
    267c:	a1 93       	st	Z+, r26
    267e:	6f 01       	movw	r12, r30
    2680:	f6 01       	movw	r30, r12
    2682:	31 96       	adiw	r30, 0x01	; 1
    2684:	e2 fe       	sbrs	r14, 2
    2686:	08 c0       	rjmp	.+16     	; 0x2698 <dtoa_prf+0x12e>
    2688:	89 e4       	ldi	r24, 0x49	; 73
    268a:	d6 01       	movw	r26, r12
    268c:	8c 93       	st	X, r24
    268e:	8e e4       	ldi	r24, 0x4E	; 78
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	8c 93       	st	X, r24
    2694:	86 e4       	ldi	r24, 0x46	; 70
    2696:	07 c0       	rjmp	.+14     	; 0x26a6 <dtoa_prf+0x13c>
    2698:	89 e6       	ldi	r24, 0x69	; 105
    269a:	d6 01       	movw	r26, r12
    269c:	8c 93       	st	X, r24
    269e:	8e e6       	ldi	r24, 0x6E	; 110
    26a0:	11 96       	adiw	r26, 0x01	; 1
    26a2:	8c 93       	st	X, r24
    26a4:	86 e6       	ldi	r24, 0x66	; 102
    26a6:	81 83       	std	Z+1, r24	; 0x01
    26a8:	32 96       	adiw	r30, 0x02	; 2
    26aa:	df 01       	movw	r26, r30
    26ac:	89 2f       	mov	r24, r25
    26ae:	20 e2       	ldi	r18, 0x20	; 32
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <dtoa_prf+0x14c>
    26b2:	2d 93       	st	X+, r18
    26b4:	81 50       	subi	r24, 0x01	; 1
    26b6:	88 23       	and	r24, r24
    26b8:	e1 f7       	brne	.-8      	; 0x26b2 <dtoa_prf+0x148>
    26ba:	e9 0f       	add	r30, r25
    26bc:	f1 1d       	adc	r31, r1
    26be:	10 82       	st	Z, r1
    26c0:	2e ef       	ldi	r18, 0xFE	; 254
    26c2:	3f ef       	ldi	r19, 0xFF	; 255
    26c4:	af c0       	rjmp	.+350    	; 0x2824 <dtoa_prf+0x2ba>
    26c6:	16 16       	cp	r1, r22
    26c8:	17 06       	cpc	r1, r23
    26ca:	1c f0       	brlt	.+6      	; 0x26d2 <dtoa_prf+0x168>
    26cc:	41 e0       	ldi	r20, 0x01	; 1
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	03 c0       	rjmp	.+6      	; 0x26d8 <dtoa_prf+0x16e>
    26d2:	ab 01       	movw	r20, r22
    26d4:	4f 5f       	subi	r20, 0xFF	; 255
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	aa 20       	and	r10, r10
    26da:	19 f4       	brne	.+6      	; 0x26e2 <dtoa_prf+0x178>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <dtoa_prf+0x17e>
    26e2:	8a 2d       	mov	r24, r10
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	01 96       	adiw	r24, 0x01	; 1
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	aa 23       	and	r26, r26
    26ee:	11 f0       	breq	.+4      	; 0x26f4 <dtoa_prf+0x18a>
    26f0:	21 e0       	ldi	r18, 0x01	; 1
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	24 0f       	add	r18, r20
    26f6:	35 1f       	adc	r19, r21
    26f8:	28 0f       	add	r18, r24
    26fa:	39 1f       	adc	r19, r25
    26fc:	81 2f       	mov	r24, r17
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	28 17       	cp	r18, r24
    2702:	39 07       	cpc	r19, r25
    2704:	14 f0       	brlt	.+4      	; 0x270a <dtoa_prf+0x1a0>
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	02 c0       	rjmp	.+4      	; 0x270e <dtoa_prf+0x1a4>
    270a:	12 1b       	sub	r17, r18
    270c:	21 2f       	mov	r18, r17
    270e:	4b 2d       	mov	r20, r11
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	ca 01       	movw	r24, r20
    2714:	80 71       	andi	r24, 0x10	; 16
    2716:	90 70       	andi	r25, 0x00	; 0
    2718:	b4 fc       	sbrc	r11, 4
    271a:	0d c0       	rjmp	.+26     	; 0x2736 <dtoa_prf+0x1cc>
    271c:	b3 fc       	sbrc	r11, 3
    271e:	0b c0       	rjmp	.+22     	; 0x2736 <dtoa_prf+0x1cc>
    2720:	f6 01       	movw	r30, r12
    2722:	32 2f       	mov	r19, r18
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	02 c0       	rjmp	.+4      	; 0x272c <dtoa_prf+0x1c2>
    2728:	41 93       	st	Z+, r20
    272a:	31 50       	subi	r19, 0x01	; 1
    272c:	33 23       	and	r19, r19
    272e:	e1 f7       	brne	.-8      	; 0x2728 <dtoa_prf+0x1be>
    2730:	c2 0e       	add	r12, r18
    2732:	d1 1c       	adc	r13, r1
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <dtoa_prf+0x1ce>
    2736:	32 2f       	mov	r19, r18
    2738:	aa 23       	and	r26, r26
    273a:	19 f0       	breq	.+6      	; 0x2742 <dtoa_prf+0x1d8>
    273c:	f6 01       	movw	r30, r12
    273e:	a1 93       	st	Z+, r26
    2740:	6f 01       	movw	r12, r30
    2742:	89 2b       	or	r24, r25
    2744:	11 f0       	breq	.+4      	; 0x274a <dtoa_prf+0x1e0>
    2746:	13 2f       	mov	r17, r19
    2748:	0a c0       	rjmp	.+20     	; 0x275e <dtoa_prf+0x1f4>
    274a:	f6 01       	movw	r30, r12
    274c:	13 2f       	mov	r17, r19
    274e:	80 e3       	ldi	r24, 0x30	; 48
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <dtoa_prf+0x1ec>
    2752:	81 93       	st	Z+, r24
    2754:	11 50       	subi	r17, 0x01	; 1
    2756:	11 23       	and	r17, r17
    2758:	e1 f7       	brne	.-8      	; 0x2752 <dtoa_prf+0x1e8>
    275a:	c3 0e       	add	r12, r19
    275c:	d1 1c       	adc	r13, r1
    275e:	09 2d       	mov	r16, r9
    2760:	06 0f       	add	r16, r22
    2762:	ba 80       	ldd	r11, Y+2	; 0x02
    2764:	90 e1       	ldi	r25, 0x10	; 16
    2766:	89 2e       	mov	r8, r25
    2768:	91 2c       	mov	r9, r1
    276a:	8e 20       	and	r8, r14
    276c:	9f 20       	and	r9, r15
    276e:	e4 fe       	sbrs	r14, 4
    2770:	04 c0       	rjmp	.+8      	; 0x277a <dtoa_prf+0x210>
    2772:	f1 e3       	ldi	r31, 0x31	; 49
    2774:	bf 16       	cp	r11, r31
    2776:	09 f4       	brne	.+2      	; 0x277a <dtoa_prf+0x210>
    2778:	01 50       	subi	r16, 0x01	; 1
    277a:	10 16       	cp	r1, r16
    277c:	14 f0       	brlt	.+4      	; 0x2782 <dtoa_prf+0x218>
    277e:	01 e0       	ldi	r16, 0x01	; 1
    2780:	03 c0       	rjmp	.+6      	; 0x2788 <dtoa_prf+0x21e>
    2782:	09 30       	cpi	r16, 0x09	; 9
    2784:	08 f0       	brcs	.+2      	; 0x2788 <dtoa_prf+0x21e>
    2786:	08 e0       	ldi	r16, 0x08	; 8
    2788:	9b 01       	movw	r18, r22
    278a:	77 ff       	sbrs	r23, 7
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <dtoa_prf+0x228>
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	cb 01       	movw	r24, r22
    2794:	01 96       	adiw	r24, 0x01	; 1
    2796:	82 1b       	sub	r24, r18
    2798:	93 0b       	sbc	r25, r19
    279a:	fe 01       	movw	r30, r28
    279c:	31 96       	adiw	r30, 0x01	; 1
    279e:	e8 0f       	add	r30, r24
    27a0:	f9 1f       	adc	r31, r25
    27a2:	8e e2       	ldi	r24, 0x2E	; 46
    27a4:	f8 2e       	mov	r15, r24
    27a6:	3b 01       	movw	r6, r22
    27a8:	60 1a       	sub	r6, r16
    27aa:	71 08       	sbc	r7, r1
    27ac:	8a 2d       	mov	r24, r10
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	44 27       	eor	r20, r20
    27b2:	55 27       	eor	r21, r21
    27b4:	48 1b       	sub	r20, r24
    27b6:	59 0b       	sbc	r21, r25
    27b8:	8f ef       	ldi	r24, 0xFF	; 255
    27ba:	2f 3f       	cpi	r18, 0xFF	; 255
    27bc:	38 07       	cpc	r19, r24
    27be:	19 f4       	brne	.+6      	; 0x27c6 <dtoa_prf+0x25c>
    27c0:	d6 01       	movw	r26, r12
    27c2:	fd 92       	st	X+, r15
    27c4:	6d 01       	movw	r12, r26
    27c6:	62 17       	cp	r22, r18
    27c8:	73 07       	cpc	r23, r19
    27ca:	2c f0       	brlt	.+10     	; 0x27d6 <dtoa_prf+0x26c>
    27cc:	62 16       	cp	r6, r18
    27ce:	73 06       	cpc	r7, r19
    27d0:	14 f4       	brge	.+4      	; 0x27d6 <dtoa_prf+0x26c>
    27d2:	80 81       	ld	r24, Z
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <dtoa_prf+0x26e>
    27d6:	80 e3       	ldi	r24, 0x30	; 48
    27d8:	21 50       	subi	r18, 0x01	; 1
    27da:	30 40       	sbci	r19, 0x00	; 0
    27dc:	31 96       	adiw	r30, 0x01	; 1
    27de:	24 17       	cp	r18, r20
    27e0:	35 07       	cpc	r19, r21
    27e2:	24 f0       	brlt	.+8      	; 0x27ec <dtoa_prf+0x282>
    27e4:	d6 01       	movw	r26, r12
    27e6:	8d 93       	st	X+, r24
    27e8:	6d 01       	movw	r12, r26
    27ea:	e6 cf       	rjmp	.-52     	; 0x27b8 <dtoa_prf+0x24e>
    27ec:	26 17       	cp	r18, r22
    27ee:	37 07       	cpc	r19, r23
    27f0:	49 f4       	brne	.+18     	; 0x2804 <dtoa_prf+0x29a>
    27f2:	b5 e3       	ldi	r27, 0x35	; 53
    27f4:	bb 15       	cp	r27, r11
    27f6:	28 f0       	brcs	.+10     	; 0x2802 <dtoa_prf+0x298>
    27f8:	bb 16       	cp	r11, r27
    27fa:	21 f4       	brne	.+8      	; 0x2804 <dtoa_prf+0x29a>
    27fc:	81 14       	cp	r8, r1
    27fe:	91 04       	cpc	r9, r1
    2800:	09 f4       	brne	.+2      	; 0x2804 <dtoa_prf+0x29a>
    2802:	81 e3       	ldi	r24, 0x31	; 49
    2804:	f6 01       	movw	r30, r12
    2806:	81 93       	st	Z+, r24
    2808:	d6 01       	movw	r26, r12
    280a:	81 2f       	mov	r24, r17
    280c:	90 e2       	ldi	r25, 0x20	; 32
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <dtoa_prf+0x2aa>
    2810:	9c 93       	st	X, r25
    2812:	81 50       	subi	r24, 0x01	; 1
    2814:	11 96       	adiw	r26, 0x01	; 1
    2816:	88 23       	and	r24, r24
    2818:	d9 f7       	brne	.-10     	; 0x2810 <dtoa_prf+0x2a6>
    281a:	e1 0f       	add	r30, r17
    281c:	f1 1d       	adc	r31, r1
    281e:	10 82       	st	Z, r1
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	c9 01       	movw	r24, r18
    2826:	29 96       	adiw	r28, 0x09	; 9
    2828:	ee e0       	ldi	r30, 0x0E	; 14
    282a:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__epilogue_restores__+0x8>

0000282e <__ftoa_engine>:
    282e:	28 30       	cpi	r18, 0x08	; 8
    2830:	08 f0       	brcs	.+2      	; 0x2834 <__ftoa_engine+0x6>
    2832:	27 e0       	ldi	r18, 0x07	; 7
    2834:	33 27       	eor	r19, r19
    2836:	da 01       	movw	r26, r20
    2838:	99 0f       	add	r25, r25
    283a:	31 1d       	adc	r19, r1
    283c:	87 fd       	sbrc	r24, 7
    283e:	91 60       	ori	r25, 0x01	; 1
    2840:	00 96       	adiw	r24, 0x00	; 0
    2842:	61 05       	cpc	r22, r1
    2844:	71 05       	cpc	r23, r1
    2846:	39 f4       	brne	.+14     	; 0x2856 <__ftoa_engine+0x28>
    2848:	32 60       	ori	r19, 0x02	; 2
    284a:	2e 5f       	subi	r18, 0xFE	; 254
    284c:	3d 93       	st	X+, r19
    284e:	30 e3       	ldi	r19, 0x30	; 48
    2850:	2a 95       	dec	r18
    2852:	e1 f7       	brne	.-8      	; 0x284c <__ftoa_engine+0x1e>
    2854:	08 95       	ret
    2856:	9f 3f       	cpi	r25, 0xFF	; 255
    2858:	30 f0       	brcs	.+12     	; 0x2866 <__ftoa_engine+0x38>
    285a:	80 38       	cpi	r24, 0x80	; 128
    285c:	71 05       	cpc	r23, r1
    285e:	61 05       	cpc	r22, r1
    2860:	09 f0       	breq	.+2      	; 0x2864 <__ftoa_engine+0x36>
    2862:	3c 5f       	subi	r19, 0xFC	; 252
    2864:	3c 5f       	subi	r19, 0xFC	; 252
    2866:	3d 93       	st	X+, r19
    2868:	91 30       	cpi	r25, 0x01	; 1
    286a:	08 f0       	brcs	.+2      	; 0x286e <__ftoa_engine+0x40>
    286c:	80 68       	ori	r24, 0x80	; 128
    286e:	91 1d       	adc	r25, r1
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	1f 93       	push	r17
    2876:	0f 93       	push	r16
    2878:	ff 92       	push	r15
    287a:	ef 92       	push	r14
    287c:	19 2f       	mov	r17, r25
    287e:	98 7f       	andi	r25, 0xF8	; 248
    2880:	96 95       	lsr	r25
    2882:	e9 2f       	mov	r30, r25
    2884:	96 95       	lsr	r25
    2886:	96 95       	lsr	r25
    2888:	e9 0f       	add	r30, r25
    288a:	ff 27       	eor	r31, r31
    288c:	e2 55       	subi	r30, 0x52	; 82
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	99 27       	eor	r25, r25
    2892:	33 27       	eor	r19, r19
    2894:	ee 24       	eor	r14, r14
    2896:	ff 24       	eor	r15, r15
    2898:	a7 01       	movw	r20, r14
    289a:	e7 01       	movw	r28, r14
    289c:	05 90       	lpm	r0, Z+
    289e:	08 94       	sec
    28a0:	07 94       	ror	r0
    28a2:	28 f4       	brcc	.+10     	; 0x28ae <__ftoa_engine+0x80>
    28a4:	36 0f       	add	r19, r22
    28a6:	e7 1e       	adc	r14, r23
    28a8:	f8 1e       	adc	r15, r24
    28aa:	49 1f       	adc	r20, r25
    28ac:	51 1d       	adc	r21, r1
    28ae:	66 0f       	add	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	88 1f       	adc	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	06 94       	lsr	r0
    28b8:	a1 f7       	brne	.-24     	; 0x28a2 <__ftoa_engine+0x74>
    28ba:	05 90       	lpm	r0, Z+
    28bc:	07 94       	ror	r0
    28be:	28 f4       	brcc	.+10     	; 0x28ca <__ftoa_engine+0x9c>
    28c0:	e7 0e       	add	r14, r23
    28c2:	f8 1e       	adc	r15, r24
    28c4:	49 1f       	adc	r20, r25
    28c6:	56 1f       	adc	r21, r22
    28c8:	c1 1d       	adc	r28, r1
    28ca:	77 0f       	add	r23, r23
    28cc:	88 1f       	adc	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	66 1f       	adc	r22, r22
    28d2:	06 94       	lsr	r0
    28d4:	a1 f7       	brne	.-24     	; 0x28be <__ftoa_engine+0x90>
    28d6:	05 90       	lpm	r0, Z+
    28d8:	07 94       	ror	r0
    28da:	28 f4       	brcc	.+10     	; 0x28e6 <__ftoa_engine+0xb8>
    28dc:	f8 0e       	add	r15, r24
    28de:	49 1f       	adc	r20, r25
    28e0:	56 1f       	adc	r21, r22
    28e2:	c7 1f       	adc	r28, r23
    28e4:	d1 1d       	adc	r29, r1
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	66 1f       	adc	r22, r22
    28ec:	77 1f       	adc	r23, r23
    28ee:	06 94       	lsr	r0
    28f0:	a1 f7       	brne	.-24     	; 0x28da <__ftoa_engine+0xac>
    28f2:	05 90       	lpm	r0, Z+
    28f4:	07 94       	ror	r0
    28f6:	20 f4       	brcc	.+8      	; 0x2900 <__ftoa_engine+0xd2>
    28f8:	49 0f       	add	r20, r25
    28fa:	56 1f       	adc	r21, r22
    28fc:	c7 1f       	adc	r28, r23
    28fe:	d8 1f       	adc	r29, r24
    2900:	99 0f       	add	r25, r25
    2902:	66 1f       	adc	r22, r22
    2904:	77 1f       	adc	r23, r23
    2906:	88 1f       	adc	r24, r24
    2908:	06 94       	lsr	r0
    290a:	a9 f7       	brne	.-22     	; 0x28f6 <__ftoa_engine+0xc8>
    290c:	84 91       	lpm	r24, Z+
    290e:	10 95       	com	r17
    2910:	17 70       	andi	r17, 0x07	; 7
    2912:	41 f0       	breq	.+16     	; 0x2924 <__ftoa_engine+0xf6>
    2914:	d6 95       	lsr	r29
    2916:	c7 95       	ror	r28
    2918:	57 95       	ror	r21
    291a:	47 95       	ror	r20
    291c:	f7 94       	ror	r15
    291e:	e7 94       	ror	r14
    2920:	1a 95       	dec	r17
    2922:	c1 f7       	brne	.-16     	; 0x2914 <__ftoa_engine+0xe6>
    2924:	e4 e5       	ldi	r30, 0x54	; 84
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	68 94       	set
    292a:	15 90       	lpm	r1, Z+
    292c:	15 91       	lpm	r17, Z+
    292e:	35 91       	lpm	r19, Z+
    2930:	65 91       	lpm	r22, Z+
    2932:	95 91       	lpm	r25, Z+
    2934:	05 90       	lpm	r0, Z+
    2936:	7f e2       	ldi	r23, 0x2F	; 47
    2938:	73 95       	inc	r23
    293a:	e1 18       	sub	r14, r1
    293c:	f1 0a       	sbc	r15, r17
    293e:	43 0b       	sbc	r20, r19
    2940:	56 0b       	sbc	r21, r22
    2942:	c9 0b       	sbc	r28, r25
    2944:	d0 09       	sbc	r29, r0
    2946:	c0 f7       	brcc	.-16     	; 0x2938 <__ftoa_engine+0x10a>
    2948:	e1 0c       	add	r14, r1
    294a:	f1 1e       	adc	r15, r17
    294c:	43 1f       	adc	r20, r19
    294e:	56 1f       	adc	r21, r22
    2950:	c9 1f       	adc	r28, r25
    2952:	d0 1d       	adc	r29, r0
    2954:	7e f4       	brtc	.+30     	; 0x2974 <__ftoa_engine+0x146>
    2956:	70 33       	cpi	r23, 0x30	; 48
    2958:	11 f4       	brne	.+4      	; 0x295e <__ftoa_engine+0x130>
    295a:	8a 95       	dec	r24
    295c:	e6 cf       	rjmp	.-52     	; 0x292a <__ftoa_engine+0xfc>
    295e:	e8 94       	clt
    2960:	01 50       	subi	r16, 0x01	; 1
    2962:	30 f0       	brcs	.+12     	; 0x2970 <__ftoa_engine+0x142>
    2964:	08 0f       	add	r16, r24
    2966:	0a f4       	brpl	.+2      	; 0x296a <__ftoa_engine+0x13c>
    2968:	00 27       	eor	r16, r16
    296a:	02 17       	cp	r16, r18
    296c:	08 f4       	brcc	.+2      	; 0x2970 <__ftoa_engine+0x142>
    296e:	20 2f       	mov	r18, r16
    2970:	23 95       	inc	r18
    2972:	02 2f       	mov	r16, r18
    2974:	7a 33       	cpi	r23, 0x3A	; 58
    2976:	28 f0       	brcs	.+10     	; 0x2982 <__ftoa_engine+0x154>
    2978:	79 e3       	ldi	r23, 0x39	; 57
    297a:	7d 93       	st	X+, r23
    297c:	2a 95       	dec	r18
    297e:	e9 f7       	brne	.-6      	; 0x297a <__ftoa_engine+0x14c>
    2980:	10 c0       	rjmp	.+32     	; 0x29a2 <__ftoa_engine+0x174>
    2982:	7d 93       	st	X+, r23
    2984:	2a 95       	dec	r18
    2986:	89 f6       	brne	.-94     	; 0x292a <__ftoa_engine+0xfc>
    2988:	06 94       	lsr	r0
    298a:	97 95       	ror	r25
    298c:	67 95       	ror	r22
    298e:	37 95       	ror	r19
    2990:	17 95       	ror	r17
    2992:	17 94       	ror	r1
    2994:	e1 18       	sub	r14, r1
    2996:	f1 0a       	sbc	r15, r17
    2998:	43 0b       	sbc	r20, r19
    299a:	56 0b       	sbc	r21, r22
    299c:	c9 0b       	sbc	r28, r25
    299e:	d0 09       	sbc	r29, r0
    29a0:	98 f0       	brcs	.+38     	; 0x29c8 <__ftoa_engine+0x19a>
    29a2:	23 95       	inc	r18
    29a4:	7e 91       	ld	r23, -X
    29a6:	73 95       	inc	r23
    29a8:	7a 33       	cpi	r23, 0x3A	; 58
    29aa:	08 f0       	brcs	.+2      	; 0x29ae <__ftoa_engine+0x180>
    29ac:	70 e3       	ldi	r23, 0x30	; 48
    29ae:	7c 93       	st	X, r23
    29b0:	20 13       	cpse	r18, r16
    29b2:	b8 f7       	brcc	.-18     	; 0x29a2 <__ftoa_engine+0x174>
    29b4:	7e 91       	ld	r23, -X
    29b6:	70 61       	ori	r23, 0x10	; 16
    29b8:	7d 93       	st	X+, r23
    29ba:	30 f0       	brcs	.+12     	; 0x29c8 <__ftoa_engine+0x19a>
    29bc:	83 95       	inc	r24
    29be:	71 e3       	ldi	r23, 0x31	; 49
    29c0:	7d 93       	st	X+, r23
    29c2:	70 e3       	ldi	r23, 0x30	; 48
    29c4:	2a 95       	dec	r18
    29c6:	e1 f7       	brne	.-8      	; 0x29c0 <__ftoa_engine+0x192>
    29c8:	11 24       	eor	r1, r1
    29ca:	ef 90       	pop	r14
    29cc:	ff 90       	pop	r15
    29ce:	0f 91       	pop	r16
    29d0:	1f 91       	pop	r17
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	99 27       	eor	r25, r25
    29d8:	87 fd       	sbrc	r24, 7
    29da:	90 95       	com	r25
    29dc:	08 95       	ret

000029de <strrev>:
    29de:	dc 01       	movw	r26, r24
    29e0:	fc 01       	movw	r30, r24
    29e2:	67 2f       	mov	r22, r23
    29e4:	71 91       	ld	r23, Z+
    29e6:	77 23       	and	r23, r23
    29e8:	e1 f7       	brne	.-8      	; 0x29e2 <strrev+0x4>
    29ea:	32 97       	sbiw	r30, 0x02	; 2
    29ec:	04 c0       	rjmp	.+8      	; 0x29f6 <strrev+0x18>
    29ee:	7c 91       	ld	r23, X
    29f0:	6d 93       	st	X+, r22
    29f2:	70 83       	st	Z, r23
    29f4:	62 91       	ld	r22, -Z
    29f6:	ae 17       	cp	r26, r30
    29f8:	bf 07       	cpc	r27, r31
    29fa:	c8 f3       	brcs	.-14     	; 0x29ee <strrev+0x10>
    29fc:	08 95       	ret

000029fe <_exit>:
    29fe:	f8 94       	cli

00002a00 <__stop_program>:
    2a00:	ff cf       	rjmp	.-2      	; 0x2a00 <__stop_program>
